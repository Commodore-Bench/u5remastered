size=5072
--------------------------------------------------------------------------
  ========< 0x00008000      4c2580         jmp 0x8025                  ; jump to new location

  |||||||   0x00008003      207a8a         jsr 0x8a7a                  ; jump to new location saving return address
  ========< 0x00008006      4cd391         jmp 0x91d3                  ; jump to new location
  |||||||   0x00008009      4678           lsr 0x78                    ; shift right one bit (memory or accumulator)
  |||||||   0x0000800b      ea             nop                         ; no operation
  |||||||   0x0000800c      20d38a         jsr 0x8ad3                  ; jump to new location saving return address
  |||||||   0x0000800f      20318a         jsr 0x8a31                  ; jump to new location saving return address
  |||||||   0x00008012      a200           ldx #0x00                   ; load index x with memory
  |||||||   0x00008014      20246c         jsr 0x6c24                  ; jump to new location saving return address
  |||||||   0x00008017      494e           eor #0x4e                   ; "exclusive-or" memory with accumulator
  |||||||   0x00008019      5452           nop 0x52,x                  ; no operation
  |||||||   0x0000801b      4f2e56         sre 0x562e
  |||||||   0x0000801e      4945           eor #0x45                   ; "exclusive-or" memory with accumulator
  |||||||   0x00008020      5700           sre 0x00,x
  ========< 0x00008022      4c7682         jmp 0x8276                  ; jump to new location

0x8000:
  --------> 0x00008025      20d589         jsr 0x89d5       ; copy stuff and clear memory
  |||||||   0x00008028      a927           lda #0x27                   ; load accumulator with memory
  |||||||   0x0000802a      8d168c         sta 0x8c16                  ; store accumulator in memory
  |||||||   0x0000802d      a900           lda #0x00                   ; load accumulator with memory
  |||||||   0x0000802f      8d178c         sta 0x8c17                  ; store accumulator in memory
  |||||||   0x00008032      a200           ldx #0x00                   ; load index x with memory
  |||||||   0x00008034      20246c         jsr 0x6c24       ; load file
  ========< 0x00008037      50 52 49 4e 54 00               ; "PRINT"
  |||||||   0x0000803d      a9a0           lda #0xa0                   ; load accumulator with memory
  |||||||   0x0000803f      20ed91         jsr 0x91ed                  ; jump to new location saving return address
  |||||||   0x00008042      20018e         jsr 0x8e01                  ; jump to new location saving return address
  ========< 0x00008045      d049           bne 0x4f9108                ; branch on result not zero
  |||||||   0x00008047      a200           ldx #0x00                   ; load index x with memory
  |||||||   0x00008049      20246c         jsr 0x6c24       ; load file
  |||||||   0x0000804c      4f 53 49 2e 4c 4f 47 4f 53 00   ; "OSI.LOGOS"
  ||| |||   0x00008056      a940           lda #0x40                   ; load accumulator with memory
  ||| |||   0x00008058      20ed91         jsr 0x91ed                  ; jump to new location saving return address
  ||| |||   0x0000805b      a200           ldx #0x00                   ; load index x with memory
  ||| |||   0x0000805d      20246c         jsr 0x6c24       ; load file
  ||| |||   0x00008060      46 4c 49 50 50 45 52 00         ; "FLIPPER"
  |||||||   0x00008068      200010         jsr 0x1000       ; execute flipper
  ========< 0x0000806b      900f           bcc 0x4f9108                ; branch on carry clear
  |||||||   0x0000806d      a901           lda #0x01                   ; load accumulator with memory
  |||||||   0x0000806f      8d128e         sta 0x8e12                  ; store accumulator in memory
  |||||||   0x00008072      a283           ldx #0x83                   ; load index x with memory
  |||||||   0x00008074      a9bf           lda #0xbf                   ; load accumulator with memory
  |||||||   0x00008076      a042           ldy #0x42                   ; load index y with memory
  |||||||   0x00008078      18             clc                         ; clear carry flag
  |||||||   0x00008079      200b8b         jsr 0x8b0b                  ; jump to new location saving return address
  --------> 0x0000807c      20018e         jsr 0x8e01                  ; jump to new location saving return address
  ========< 0x0000807f      d005           bne 0x4f9108                ; branch on result not zero
  |||||||   0x00008081      a903           lda #0x03                   ; load accumulator with memory
  |||||||   0x00008083      20f08a         jsr 0x8af0                  ; jump to new location saving return address
  --------> 0x00008086      a91f           lda #0x1f                   ; load accumulator with memory
  |||||||   0x00008088      a200           ldx #0x00                   ; load index x with memory
  |||||||   0x0000808a      a096           ldy #0x96                   ; load index y with memory
  |||||||   0x0000808c      38             sec                         ; set carry flag
  |||||||   0x0000808d      200b8b         jsr 0x8b0b                  ; jump to new location saving return address
  --------> 0x00008090      20128a         jsr 0x8a12       ; load files
  |||||||   0x00008093      20018e         jsr 0x8e01       ; check for keypress
  ========< 0x00008096      d00f           bne 0x4f9108                ; branch on result not zero
  |||||||   0x00008098      a200           ldx #0x00                   ; load index x with memory
  |||||||   0x0000809a      20246c         jsr 0x6c24       ; load file
  |||||||   0x0000809d      55 35 2e 50 54 48 54 42 4c 00   ; "U5.PTHTBL"
            0x000080a7      20bd8a         jsr 0x8abd       ; delete memory
            0x000080aa      a200           ldx #0x00                   ; load index x with memory
            0x000080ac      a970           lda #0x70                   ; load accumulator with memory
            0x000080ae      8d20d0         sta 0xd020       ; border color
        .-> 0x000080b1      9d0004         sta 0x0400,x                ; store accumulator in memory
        |   0x000080b4      9d0005         sta 0x0500,x                ; store accumulator in memory
        |   0x000080b7      9d0006         sta 0x0600,x                ; store accumulator in memory
        |   0x000080ba      9d0007         sta 0x0700,x                ; store accumulator in memory
  ||| |||   0x000080bd      ca             dex                         ; decrement index x by one
  ||| ||`=< 0x000080be      d0f1           bne 0x4f9108                ; branch on result not zero
  ||| ||    0x000080c0      a227           ldx #0x27                   ; load index x with memory
  ||| ||.-> 0x000080c2      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x000080c4      9d0004         sta 0x0400,x                ; store accumulator in memory
  ||| |||   0x000080c7      a9e0           lda #0xe0                   ; load accumulator with memory
  ||| |||   0x000080c9      9d4807         sta 0x0748,x                ; store accumulator in memory
  ||| |||   0x000080cc      9d7007         sta 0x0770,x                ; store accumulator in memory
  ||| |||   0x000080cf      a940           lda #0x40                   ; load accumulator with memory
  ||| |||   0x000080d1      9d9807         sta 0x0798,x                ; store accumulator in memory
  ||| |||   0x000080d4      9dc007         sta 0x07c0,x                ; store accumulator in memory
  ||| |||   0x000080d7      ca             dex                         ; decrement index x by one
  ||| ||`=< 0x000080d8      10e8           bpl 0x4f9108                ; branch on result plus
  ||| ||    0x000080da      a93c           lda #0x3c                   ; load accumulator with memory
  ||| ||    0x000080dc      a220           ldx #0x20                   ; load index x with memory
  ||| ||    0x000080de      a001           ldy #0x01                   ; load index y with memory
  ||| ||    0x000080e0      38             sec                         ; set carry flag
  ||| ||    0x000080e1      200b8b         jsr 0x8b0b       ; draw "A"
  ||| ||    0x000080e4      20018e         jsr 0x8e01       ; check for keypress
  ||| ||,=< 0x000080e7      d005           bne 0x4f9108                ; branch on result not zero
  ||| |||   0x000080e9      a902           lda #0x02                   ; load accumulator with memory
  ||| |||   0x000080eb      20f08a         jsr 0x8af0       ; ?
  ||| ||`-> 0x000080ee      20018e         jsr 0x8e01       ; check for keypress
  ||| ||,=< 0x000080f1      d003           bne 0x4f9108                ; branch on result not zero
  ||| |||   0x000080f3      20138e         jsr 0x8e13       ; draw "Lord British"
  ||| ||`-> 0x000080f6      a978           lda #0x78                   ; load accumulator with memory
  ||| ||    0x000080f8      a23d           ldx #0x3d                   ; load index x with memory
  ||| ||    0x000080fa      a025           ldy #0x25                   ; load index y with memory
  ||| ||    0x000080fc      38             sec                         ; set carry flag
  ||| ||    0x000080fd      200b8b         jsr 0x8b0b       ; 
  ||| ||    0x00008100      20018e         jsr 0x8e01       ; check for keypress
  ||| ||,=< 0x00008103      d005           bne 0x4f9108                ; branch on result not zero
  ||| |||   0x00008105      a902           lda #0x02                   ; load accumulator with memory
  ||| |||   0x00008107      20f08a         jsr 0x8af0       ; 
  ||| ||`-> 0x0000810a      a9a2           lda #0xa2                   ; load accumulator with memory
  ||| ||    0x0000810c      a27d           ldx #0x7d                   ; load index x with memory
  ||| ||    0x0000810e      a06b           ldy #0x6b                   ; load index y with memory
  ||| ||    0x00008110      38             sec                         ; set carry flag
  ||| ||    0x00008111      200b8b         jsr 0x8b0b       ; draw "Production"
  ||| ||    0x00008114      20018e         jsr 0x8e01       ; check for keypress
  ||| ||,=< 0x00008117      f003           beq 0x4f9108                ; branch on result zero
  |||,====< 0x00008119      4cd181         jmp 0x81d1       ; probably shortcut for key has been pressed
  ||||||`-> 0x0000811c      a905           lda #0x05                   ; load accumulator with memory
  ||||||    0x0000811e      20f08a         jsr 0x8af0       ; 
  ||||||    0x00008121      a23f           ldx #0x3f                   ; load index x with memory
  ||||||.-> 0x00008123      bd1191         lda 0x9111,x                ; load accumulator with memory
  |||||||   0x00008126      9dc03f         sta 0x3fc0,x                ; store accumulator in memory
  |||||||   0x00008129      ca             dex                         ; decrement index x by one
  ||||||`=< 0x0000812a      10f7           bpl 0x4f9108                ; branch on result plus
  ||||||    0x0000812c      a900           lda #0x00                   ; load accumulator with memory
  ||||||    0x0000812e      8d10d0         sta 0xd010       ; sprite register
  ||||||    0x00008131      8d17d0         sta 0xd017       ; sprite register
  ||||||    0x00008134      8d1bd0         sta 0xd01b       ; sprite register
  ||||||    0x00008137      8d1cd0         sta 0xd01c       ; sprite register
  ||||||    0x0000813a      8d1dd0         sta 0xd01d       ; sprite register
  ||||||    0x0000813d      8d27d0         sta 0xd027       ; sprite 0 register
  ||||||    0x00008140      a901           lda #0x01                   ; load accumulator with memory
  ||||||    0x00008142      8d28d0         sta 0xd028       ; sprite 1 register
  ||||||    0x00008145      a9ff           lda #0xff                   ; load accumulator with memory
  ||||||    0x00008147      8df807         sta 0x07f8                  ; store accumulator in memory
  ||||||    0x0000814a      8df907         sta 0x07f9                  ; store accumulator in memory
  ||||||    0x0000814d      a903           lda #0x03                   ; load accumulator with memory
  ||||||    0x0000814f      8d15d0         sta 0xd015       ; srpite enable
  ||||||    0x00008152      a919           lda #0x19                   ; load accumulator with memory
  ||||||    0x00008154      8d00d0         sta 0xd000       ; sprite register
  ||||||    0x00008157      a921           lda #0x21                   ; load accumulator with memory
  ||||||    0x00008159      8d02d0         sta 0xd002       ; sprite register
  ||||||    0x0000815c      a9d7           lda #0xd7                   ; load accumulator with memory
  ||||||    0x0000815e      8d01d0         sta 0xd001       ; sprite register
  ||||||    0x00008161      a9e9           lda #0xe9                   ; load accumulator with memory
  ||||||    0x00008163      8d03d0         sta 0xd003       ; sprite register
  ||||||    0x00008166      a200           ldx #0x00                   ; load index x with memory
  ||||||    0x00008168      a000           ldy #0x00                   ; load index y with memory
  ||||||.-> 0x0000816a      8a             txa                         ; transfer index x to accumulator
  |||||||   0x0000816b      4a             lsr a                       ; shift right one bit (memory or accumulator)
  ========< 0x0000816c      b015           bcs 0x4f9108                ; branch on carry set
  |||||||   0x0000816e      ad00d0         lda 0xd000       ; sprite register
  |||||||   0x00008171      18             clc                         ; clear carry flag
  |||||||   0x00008172      6910           adc #0x10                   ; add memory to accumulator with carry
  |||||||   0x00008174      8d00d0         sta 0xd000       ; sprite register
  ========< 0x00008177      901d           bcc 0x4f9108                ; branch on carry clear
  |||||||   0x00008179      ad10d0         lda 0xd010       ; sprite register
  |||||||   0x0000817c      0901           ora #0x01                   ; "or" memory with accumulator
  |||||||   0x0000817e      8d10d0         sta 0xd010       ; sprite register
  ========< 0x00008181      d013           bne 0x4f9108                ; branch on result not zero
  --------> 0x00008183      ad02d0         lda 0xd002       ; sprite register
  |||||||   0x00008186      18             clc                         ; clear carry flag
  |||||||   0x00008187      6910           adc #0x10                   ; add memory to accumulator with carry
  |||||||   0x00008189      8d02d0         sta 0xd002       ; sprite register
  ========< 0x0000818c      9008           bcc 0x4f9108                ; branch on carry clear
  |||||||   0x0000818e      ad10d0         lda 0xd010       ; sprite register
  |||||||   0x00008191      0902           ora #0x02                   ; "or" memory with accumulator
  |||||||   0x00008193      8d10d0         sta 0xd010       ; sprite register
  --------> 0x00008196      a908           lda #0x08                   ; load accumulator with memory
  |||||||   0x00008198      85fe           sta 0xfe                    ; store accumulator in memory
  --------> 0x0000819a      206793         jsr 0x9367       ; call
  |||||||   0x0000819d      c6fe           dec 0xfe                    ; decrement memory by one
  ========< 0x0000819f      d0f9           bne 0x4f9108                ; branch on result not zero
  |||||||   0x000081a1      8a             txa                         ; transfer index x to accumulator
  |||||||   0x000081a2      48             pha                         ; push accumulator on stack
  |||||||   0x000081a3      a215           ldx #0x15                   ; load index x with memory
  --------> 0x000081a5      a900           lda #0x00                   ; load accumulator with memory
  --------> 0x000081a7      ad12d0         lda 0xd012       ; sprite register
  |||||||   0x000081aa      c9c8           cmp #0xc8                   ; compare memory and accumulator
  ========< 0x000081ac      b0f9           bcs 0x4f9108                ; branch on carry set
  |||||||   0x000081ae      ad27d0         lda 0xd027       ; sprite register
  |||||||   0x000081b1      18             clc                         ; clear carry flag
  |||||||   0x000081b2      6903           adc #0x03                   ; add memory to accumulator with carry
  |||||||   0x000081b4      8d27d0         sta 0xd027       ; sprite register
  |||||||   0x000081b7      ad28d0         lda 0xd028       ; sprite register
  |||||||   0x000081ba      18             clc                         ; clear carry flag
  |||||||   0x000081bb      6903           adc #0x03                   ; add memory to accumulator with carry
  |||||||   0x000081bd      8d28d0         sta 0xd028       ; sprite register
  --------> 0x000081c0      48             pha                         ; push accumulator on stack
  |||||||   0x000081c1      68             pla                         ; pull accumulator from stack
  |||||||   0x000081c2      38             sec                         ; set carry flag
  |||||||   0x000081c3      e901           sbc #0x01                   ; subtract memory from accumulator with borrow
  ========< 0x000081c5      d0f9           bne 0x4f9108                ; branch on result not zero
  |||||||   0x000081c7      ca             dex                         ; decrement index x by one
  ========< 0x000081c8      d0db           bne 0x4f9108                ; branch on result not zero
  |||||||   0x000081ca      68             pla                         ; pull accumulator from stack
  |||||||   0x000081cb      aa             tax                         ; transfer accumulator to index x
  |||||||   0x000081cc      e8             inx                         ; increment index x by one
  |||||||   0x000081cd      e028           cpx #0x28                   ; compare memory and index x
  ||||||`=< 0x000081cf      d099           bne 0x4f9108                ; branch on result not zero
  |||`----> 0x000081d1      a9be           lda #0xbe                   ; load accumulator with memory
  ||| ||    0x000081d3      a2a3           ldx #0xa3                   ; load index x with memory
  ||| ||    0x000081d5      a0a3           ldy #0xa3                   ; load index y with memory
  ||| ||    0x000081d7      38             sec                         ; set carry flag
  ||| ||    0x000081d8      200b8b         jsr 0x8b0b       ; 
  ||| ||    0x000081db      20018e         jsr 0x8e01       ; check for keypress
  ||| ||,=< 0x000081de      d005           bne 0x4f9108                ; branch on result not zero
  ||| |||   0x000081e0      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x000081e2      8d15d0         sta 0xd015        ; sprite register (disable sprites)
  ||| ||`-> 0x000081e5      a200           ldx #0x00                   ; load index x with memory
  ||| ||    0x000081e7      20246c         jsr 0x6c24        ; load file
  ||| ||    0x000081ea      53 33 00                         ; "S3"
  ||| ||    0x000081ed      20066c         jsr 0x6c06        ; set memory banking: set ram visible in all areas
  ||| ||    0x000081f0      a200           ldx #0x00                   ; load index x with memory
  ||| ||.-> 0x000081f2      e00f           cpx #0x0f                   ; compare memory and index x
  |||,====< 0x000081f4      9006           bcc 0x4f9108                ; branch on carry clear
  |||||||   0x000081f6      bd00cf         lda 0xcf00,x      ; copy memory
  |||||||   0x000081f9      9d00ff         sta 0xff00,x                ; store accumulator in memory
  |||`----> 0x000081fc      bd00ce         lda 0xce00,x                ; load accumulator with memory
  ||| |||   0x000081ff      9d00fe         sta 0xfe00,x                ; store accumulator in memory
  ||| |||   0x00008202      bd00cd         lda 0xcd00,x                ; load accumulator with memory
  ||| |||   0x00008205      9d00fd         sta 0xfd00,x                ; store accumulator in memory
  ||| |||   0x00008208      bd00cc         lda 0xcc00,x                ; load accumulator with memory
  ||| |||   0x0000820b      9d00fc         sta 0xfc00,x                ; store accumulator in memory
  ||| |||   0x0000820e      bd00cb         lda 0xcb00,x                ; load accumulator with memory
  ||| |||   0x00008211      9d00fb         sta 0xfb00,x                ; store accumulator in memory
  ||| |||   0x00008214      bd00ca         lda 0xca00,x                ; load accumulator with memory
  ||| |||   0x00008217      9d00fa         sta 0xfa00,x                ; store accumulator in memory
  ||| |||   0x0000821a      bd00c9         lda 0xc900,x                ; load accumulator with memory
  ||| |||   0x0000821d      9d00f9         sta 0xf900,x                ; store accumulator in memory
  ||| |||   0x00008220      bd00c8         lda 0xc800,x                ; load accumulator with memory
  ||| |||   0x00008223      9d00f8         sta 0xf800,x                ; store accumulator in memory
  ||| |||   0x00008226      bd00c7         lda 0xc700,x                ; load accumulator with memory
  ||| |||   0x00008229      9d00f7         sta 0xf700,x                ; store accumulator in memory
  ||| |||   0x0000822c      bd00c6         lda 0xc600,x                ; load accumulator with memory
  ||| |||   0x0000822f      9d00f6         sta 0xf600,x                ; store accumulator in memory
  ||| |||   0x00008232      bd00c5         lda 0xc500,x                ; load accumulator with memory
  ||| |||   0x00008235      9d00f5         sta 0xf500,x                ; store accumulator in memory
  ||| |||   0x00008238      bd00c4         lda 0xc400,x                ; load accumulator with memory
  ||| |||   0x0000823b      9d00f4         sta 0xf400,x                ; store accumulator in memory
  ||| |||   0x0000823e      bd00c3         lda 0xc300,x                ; load accumulator with memory
  ||| |||   0x00008241      9d00f3         sta 0xf300,x                ; store accumulator in memory
  ||| |||   0x00008244      bd00c2         lda 0xc200,x                ; load accumulator with memory
  ||| |||   0x00008247      9d00f2         sta 0xf200,x                ; store accumulator in memory
  ||| |||   0x0000824a      bd00c1         lda 0xc100,x                ; load accumulator with memory
  ||| |||   0x0000824d      9d00f1         sta 0xf100,x                ; store accumulator in memory
  ||| |||   0x00008250      bd00c0         lda 0xc000,x                ; load accumulator with memory
  ||| |||   0x00008253      9d00f0         sta 0xf000,x                ; store accumulator in memory
  ||| |||   0x00008256      ca             dex                         ; decrement index x by one
  ||| ||`=< 0x00008257      d099           bne 0x4f9108                ; branch on result not zero
  ||| ||    0x00008259      20036c         jsr 0x6c03       ; set memory banking: set kernal and io visible
  ||| ||    0x0000825c      a200           ldx #0x00                   ; load index x with memory
  ||| ||    0x0000825e      20246c         jsr 0x6c24       ; load file
  ||| ||    0x00008261      53 32 00                        ; "S2"
  ||| ||    0x00008264      a9e0           lda #0xe0                   ; load accumulator with memory
  ||| ||    0x00008266      200e86         jsr 0x860e       ; 
  ||| ||    0x00008269      a200           ldx #0x00                   ; load index x with memory
  ||| ||    0x0000826b      20246c         jsr 0x6c24       ; load file
  ||| ||    0x0000826e      53 31 00                        ; "S1"
  ||| ||    0x00008271      a9d0           lda #0xd0                   ; load accumulator with memory
  ||| ||    0x00008273      200e86         jsr 0x860e       ; process
  --------> 0x00008276      a900           lda #0x00                   ; load accumulator with memory
  ||| ||    0x00008278      851f           sta 0x1f                    ; store accumulator in memory
  ||| ||    0x0000827a      a903           lda #0x03                   ; load accumulator with memory
  ||| ||    0x0000827c      851e           sta 0x1e                    ; store accumulator in memory
  ||| ||    0x0000827e      ad86e4         lda 0xe486                  ; load accumulator with memory
  ||| ||    0x00008281      c946           cmp #0x46                   ; compare memory and accumulator
  ||| ||,=< 0x00008283      d021           bne 0x4f9108                ; branch on result not zero
  ||| |||   0x00008285      ad87e4         lda 0xe487                  ; load accumulator with memory
  ||| |||   0x00008288      c94c           cmp #0x4c                   ; compare memory and accumulator
  |||,====< 0x0000828a      d01a           bne 0x4f9108                ; branch on result not zero
  |||||||   0x0000828c      ad88e4         lda 0xe488                  ; load accumulator with memory
  |||||||   0x0000828f      c941           cmp #0x41                   ; compare memory and accumulator
  ========< 0x00008291      d013           bne 0x4f9108                ; branch on result not zero
  |||||||   0x00008293      ad89e4         lda 0xe489                  ; load accumulator with memory
  |||||||   0x00008296      c953           cmp #0x53                   ; compare memory and accumulator
  ========< 0x00008298      d00c           bne 0x4f9108                ; branch on result not zero
  |||||||   0x0000829a      ad8ae4         lda 0xe48a                  ; load accumulator with memory
  |||||||   0x0000829d      c948           cmp #0x48                   ; compare memory and accumulator
  ========< 0x0000829f      d005           bne 0x4f9108                ; branch on result not zero
  |||||||   0x000082a1      a901           lda #0x01                   ; load accumulator with memory
  |||||||   0x000082a3      8d5e8f         sta 0x8f5e                  ; store accumulator in memory
  ---`--`-> 0x000082a6      a200           ldx #0x00                   ; load index x with memory
  ||| ||    0x000082a8      20246c         jsr 0x6c24       ; load file
  ||| ||    0x000082ab      55 50 44 41 54 45 2e 48 49 4d 45 4d 00 ; "UPDATE.HIMEM"
  ||| ||    0x000082b8      a5c8           lda 0xc8                    ; load accumulator with memory
  ||| ||,=< 0x000082ba      101a           bpl 0x4f9108                ; branch on result plus
  ||| |||   0x000082bc      a9f8           lda #0xf8                   ; load accumulator with memory
  ||| |||   0x000082be      85fe           sta 0xfe                    ; store accumulator in memory
  ||| |||   0x000082c0      a9ff           lda #0xff                   ; load accumulator with memory
  ||| |||   0x000082c2      85ff           sta 0xff                    ; store accumulator in memory
  ||| |||   0x000082c4      a9fe           lda #0xfe                   ; load accumulator with memory
  ||| |||   0x000082c6      8db902         sta 0x02b9                  ; store accumulator in memory
  ||| |||   0x000082c9      a003           ldy #0x03                   ; load index y with memory
  |||.----> 0x000082cb      a27f           ldx #0x7f                   ; load index x with memory
  |||||||   0x000082cd      b9928c         lda 0x8c92,y                ; load accumulator with memory
  |||||||   0x000082d0      20af02         jsr 0x02af                  ; jump to new location saving return address
  |||||||   0x000082d3      88             dey                         ; decrement index y by one
  |||`====< 0x000082d4      10f5           bpl 0x4f9108                ; branch on result plus
  ||| ||`-> 0x000082d6      a200           ldx #0x00                   ; load index x with memory
  ||| ||    0x000082d8      20246c         jsr 0x6c24       ; load file
  ||| ||    0x000082db      43 4f 4c 4f 52 53 00            ; "COLORS"
  ||| ||    0x000082e2      78             sei                         ; set interrupt disable status
  ||| ||    0x000082e3      a5c8           lda 0xc8                    ; load accumulator with memory
  ||| ||,=< 0x000082e5      1003           bpl 0x4f9108                ; branch on result plus
  ||| |||   0x000082e7      20891d         jsr 0x1d89                  ; jump to new location saving return address
  ||| ||`-> 0x000082ea      a200           ldx #0x00        ; copy memory
  ||| ||.-> 0x000082ec      bd00b0         lda 0xb000,x                ; load accumulator with memory
  ||| |||   0x000082ef      9d0008         sta 0x0800,x                ; store accumulator in memory
  ||| |||   0x000082f2      bd00b1         lda 0xb100,x                ; load accumulator with memory
  ||| |||   0x000082f5      9d0009         sta 0x0900,x                ; store accumulator in memory
  ||| |||   0x000082f8      bd00b2         lda 0xb200,x                ; load accumulator with memory
  ||| |||   0x000082fb      9d000a         sta 0x0a00,x                ; store accumulator in memory
  ||| |||   0x000082fe      bd00b3         lda 0xb300,x                ; load accumulator with memory
  ||| |||   0x00008301      9d000b         sta 0x0b00,x                ; store accumulator in memory
  ||| |||   0x00008304      bd00b4         lda 0xb400,x                ; load accumulator with memory
  ||| |||   0x00008307      9d000c         sta 0x0c00,x                ; store accumulator in memory
  ||| |||   0x0000830a      bd00b5         lda 0xb500,x                ; load accumulator with memory
  ||| |||   0x0000830d      9d000d         sta 0x0d00,x                ; store accumulator in memory
  ||| |||   0x00008310      bd00b6         lda 0xb600,x                ; load accumulator with memory
  ||| |||   0x00008313      9d000e         sta 0x0e00,x                ; store accumulator in memory
  ||| |||   0x00008316      bd00b7         lda 0xb700,x                ; load accumulator with memory
  ||| |||   0x00008319      9d000f         sta 0x0f00,x                ; store accumulator in memory
  ||| |||   0x0000831c      ca             dex                         ; decrement index x by one
  ||| ||`=< 0x0000831d      d0cd           bne 0x4f9108     ; copy finish
  ||| ||    0x0000831f      a5c8           lda 0xc8                    ; load accumulator with memory
  ||| ||,=< 0x00008321      1003           bpl 0x4f9108                ; branch on result plus
  ||| |||   0x00008323      20891d         jsr 0x1d89                  ; jump to new location saving return address
  ||| ||`-> 0x00008326      58             cli                         ; clear interrupt disable bit
  ||| ||    0x00008327      a200           ldx #0x00                   ; load index x with memory
  ||| ||    0x00008329      20246c         jsr 0x6c24       ; load file
  ||| ||    0x0000832c      46 4c 41 4d 45 53 00            ; "FLAMES"
  ||| ||    0x00008333      a940           lda #0x40                   ; load accumulator with memory
  ||| ||    0x00008335      8dee91         sta 0x91ee                  ; store accumulator in memory
  ||| ||    0x00008338      a9a0           lda #0xa0                   ; load accumulator with memory
  ||| ||    0x0000833a      20ed91         jsr 0x91ed                  ; jump to new location saving return address
  ||| ||    0x0000833d      a9c0           lda #0xc0                   ; load accumulator with memory
  ||| ||    0x0000833f      8dee91         sta 0x91ee                  ; store accumulator in memory
  ||| ||    0x00008342      a200           ldx #0x00                   ; load index x with memory
  ||| ||    0x00008344      20246c         jsr 0x6c24       ; load file
  ||| ||    0x00008347      55 35 2e 4c 4f 47 4f 00         ; "U5.LOGO"
  ||| ||    0x0000834f      a940           lda #0x40                   ; load accumulator with memory
  ||| ||    0x00008351      20ed91         jsr 0x91ed                  ; jump to new location saving return address
  ||| ||    0x00008354      a221           ldx #0x21                   ; load index x with memory
  ||| ||    0x00008356      20bf8a         jsr 0x8abf       ; clear memory
  ||| ||    0x00008359      20d38a         jsr 0x8ad3       ; fille screen with something
  ||| ||    0x0000835c      a200           ldx #0x00                   ; load index x with memory
  ||| ||    0x0000835e      8e20d0         stx 0xd020       ; border color
  ||| ||    0x00008361      a200           ldx #0x00                   ; load index x with memory
  ||| ||    0x00008363      20246c         jsr 0x6c24       ; load file
  ||| ||    0x00008366      53 30 00                        ; "S0"
  ||| ||`-> 0x00008369      a200           ldx #0x00                   ; load index x with memory
  ||| ||    0x0000836b      20246c         jsr 0x6c24       ; load file
  ||| `===< 0x0000836e      4c 4f 47 4f 2e 43 4f 4c 4f 52 53 00 ; "LOGO.COLORS"
   ||  |    0x0000837a      a200           ldx #0x00                   ; load index x with memory
   ||  |.-> 0x0000837c      bd0010         lda 0x1000,x                ; load accumulator with memory
   ||  ||   0x0000837f      9d0004         sta 0x0400,x                ; store accumulator in memory
   ||  ||   0x00008382      bd0011         lda 0x1100,x                ; load accumulator with memory
   ||  ||   0x00008385      9d0005         sta 0x0500,x                ; store accumulator in memory
   ||  ||   0x00008388      bd8011         lda 0x1180,x                ; load accumulator with memory
   ||  ||   0x0000838b      9d8005         sta 0x0580,x                ; store accumulator in memory
   ||  ||   0x0000838e      ca             dex                         ; decrement index x by one
   ||  |`=< 0x0000838f      d0eb           bne 0x4f9108                ; branch on result not zero
   ||  |    0x00008391      a208           ldx #0x08                   ; load index x with memory
   ||  |    0x00008393      a920           lda #0x20                   ; load accumulator with memory
   ||  |.-> 0x00008395      9d2006         sta 0x0620,x                ; store accumulator in memory
   ||  ||   0x00008398      ca             dex                         ; decrement index x by one
   ||  |`=< 0x00008399      d0fa           bne 0x4f9108                ; branch on result not zero
   ||  |    0x0000839b      a201           ldx #0x01                   ; load index x with memory
   ||  |    0x0000839d      20406c         jsr 0x6c40       ; ?
   ||  |    0x000083a0      20188c         jsr 0x8c18       ; logo appear
   ||  |    0x000083a3      20018e         jsr 0x8e01       ; check key
   ||  |,=< 0x000083a6      d042           bne 0x4f9108                ; branch on result not zero
   ||  ||   0x000083a8      a240           ldx #0x40                   ; load index x with memory
   ||  ||   0x000083aa      20bf8a         jsr 0x8abf       ; delete memory
   ||  ||   0x000083ad      a237           ldx #0x37                   ; load index x with memory
   ||  ||   0x000083af      8ef283         stx 0x83f2                  ; store index x in memory
   || .---> 0x000083b2      209e8a         jsr 0x8a9e       ; partial reveal of flames
   || |||   0x000083b5      20018e         jsr 0x8e01       ; check key
   ||,====< 0x000083b8      d005           bne 0x4f9108                ; branch on result not zero
   ||||||   0x000083ba      cef283         dec 0x83f2                  ; decrement memory by one
   |||`===< 0x000083bd      10f3           bpl 0x4f9108                ; branch on result plus
   ||`----> 0x000083bf      a92b           lda #0x2b        
   ||  ||   0x000083c1      20488a         jsr 0x8a48       ; color of text in flames
   ||  ||   0x000083c4      a92c           lda #0x2c                   ; load accumulator with memory
   ||  ||   0x000083c6      20488a         jsr 0x8a48       ; color of text in flames
   ||  ||   0x000083c9      a92f           lda #0x2f                   ; load accumulator with memory
   ||  ||   0x000083cb      20488a         jsr 0x8a48       ; color of text in flames
   ||  ||   0x000083ce      a921           lda #0x21                   ; load accumulator with memory
   ||  ||   0x000083d0      20488a         jsr 0x8a48       ; color of text in flames
   ||  ||   0x000083d3      a210           ldx #0x10                   ; load index x with memory
   ||  ||   0x000083d5      8ef283         stx 0x83f2                  ; store index x in memory
   || .---> 0x000083d8      207a8a         jsr 0x8a7a                  ; jump to new location saving return address
   || |||   0x000083db      20018e         jsr 0x8e01       ; check key
   ||,====< 0x000083de      d00a           bne 0x4f9108                ; branch on result not zero
   ||||||   0x000083e0      a950           lda #0x50                   ; load accumulator with memory
   ||||||   0x000083e2      20018b         jsr 0x8b01                  ; jump to new location saving return address
   ||||||   0x000083e5      cef283         dec 0x83f2                  ; decrement memory by one
   |||`===< 0x000083e8      10ee           bpl 0x4f9108                ; branch on result plus
   ||`--`-> 0x000083ea      a921           lda #0x21                   ; load accumulator with memory
   ||  |    0x000083ec      20488a         jsr 0x8a48       ; color of text in flames
   ||  |,=< 0x000083ef      4cf383         jmp 0x83f3                  ; jump to new location
   ||  ||   0x000083f2      00             brk              ; variable

(after loading intro) breakpoint at 0x83f3
   ||  |`-> 0x000083f3      a950           lda #0x50                   ; load accumulator with memory
   ||  |    0x000083f5      8df283         sta 0x83f2                  ; store accumulator in memory
   ||  |    0x000083f8      207a8a         jsr 0x8a7a                  ; jump to new location saving return address
   ||  |    0x000083fb      20318a         jsr 0x8a31       ; load file in this subroutine
   ||  |    0x000083fe      20708d         jsr 0x8d70       ; draw border
   ||  |    0x00008401      20cb8b         jsr 0x8bcb       ; draw border
   ||  |    0x00008404      202a4c         jsr 0x4c2a       ; 0x4c2a in main.sub           
   ||  |    0x00008407      209b93         jsr 0x939b       ; jumps to intro.view, infinite until key pressed
   || .-.-> 0x0000840a      20708d         jsr 0x8d70       ; draw stuff
   || |||   0x0000840d      20cb8b         jsr 0x8bcb       ; draw stuff
   || |||   0x00008410      202a4c         jsr 0x4c2a       ; 0x4c2a in main.sub
   || |||   0x00008413      a900           lda #0x00                   ; load accumulator with memory
   || |||   0x00008415      857b           sta 0x7b                    ; store accumulator in memory
  .--.----> 0x00008417      a5c8           lda 0xc8                    ; load accumulator with memory
  |||||||   0x00008419      29fe           and #0xfe                   ; "and" memory with accumulator
  |||||||   0x0000841b      85c8           sta 0xc8                    ; store accumulator in memory
  |||||||   0x0000841d      a9b1           lda #0xb1                   ; load accumulator with memory
  |||||||   0x0000841f      8d0985         sta 0x8509                  ; store accumulator in memory
  |||||||   0x00008422      ad5e8f         lda 0x8f5e                  ; load accumulator with memory
  ========< 0x00008425      d02c           bne 0x4f9108                ; branch on result not zero
  |||||||   0x00008427      209f4c         jsr 0x4c9f       ; RTS in stack in main.subs
  |||||||   0x0000842a      a908           lda #0x08                   ; load accumulator with memory
  |||||||   0x0000842c      20e688         jsr 0x88e6       ; reopen secondary channel 15
  |||||||   0x0000842f      08             php                         ; push processor status on stack
  |||||||   0x00008430      20a24c         jsr 0x4ca2       ; RTS in stack in main.subs
  |||||||   0x00008433      28             plp                         ; pull processor status from stack
  ========< 0x00008434      d01d           bne 0x4f9108                ; branch on result not zero
  |||||||   0x00008436      209f4c         jsr 0x4c9f       ; RTS in stack in main.subs
  |||||||   0x00008439      a909           lda #0x09                   ; load accumulator with memory
  |||||||   0x0000843b      20e688         jsr 0x88e6       ; reopen secondary channel 15
  |||||||   0x0000843e      08             php                         ; push processor status on stack
  |||||||   0x0000843f      20a24c         jsr 0x4ca2       ; RTS in stack in main.subs
  |||||||   0x00008442      28             plp                         ; pull processor status from stack
  ========< 0x00008443      d00e           bne 0x4f9108                ; branch on result not zero
  |||||||   0x00008445      a5c8           lda 0xc8                    ; load accumulator with memory
  |||||||   0x00008447      0901           ora #0x01                   ; "or" memory with accumulator
  |||||||   0x00008449      85c8           sta 0xc8                    ; store accumulator in memory
  |||||||   0x0000844b      a9b2           lda #0xb2                   ; load accumulator with memory
  |||||||   0x0000844d      8d0985         sta 0x8509                  ; store accumulator in memory
  --------> 0x00008450      20cb8b         jsr 0x8bcb                  ; jump to new location saving return address
  --------> 0x00008453      a910           lda #0x10                   ; load accumulator with memory
  |||||||   0x00008455      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x00008457      a90d           lda #0x0d                   ; load accumulator with memory
  |||||||   0x00008459      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x0000845b      20004c         jsr 0x4c00       ; write text
  |||||||   0x0000845e      ca ef f5 f2 ee e5 f9 a0 cf ee f7 e1 f2 e4 00
  |||||||   0x0000846d      a911           lda #0x11                   ; load accumulator with memory
  |||||||   0x0000846f      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x00008471      a90a           lda #0x0a                   ; load accumulator with memory
  |||||||   0x00008473      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x00008475      20004c         jsr 0x4c00       ; write text
            0x00008478      c3 f2 e5 e1 f4 e5 a0 ce e5 f7 a0 c3 e8 e1 f2 e1 e3 f4 e5 f2 00
  |||||||   0x0000848d      a912           lda #0x12                   ; load accumulator with memory
  |||||||   0x0000848f      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x00008491      a909           lda #0x09                   ; load accumulator with memory
  |||||||   0x00008493      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x00008495      20004c         jsr 0x4c00       ; write text
            0x00008498      d4f2e1eef3e6e5f2a0e6f2efeda0d5ecf4e9ede1a0313500  
  |||||||   0x000084b0      a913           lda #0x13                   ; load accumulator with memory
  |||||||   0x000084b2      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x000084b4      a90a           lda #0x0a                   ; load accumulator with memory
  |||||||   0x000084b6      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x000084b8      20004c         jsr 0x4c00       ; write text
            0x000084bb      d5ecf4e9ede1a035a0c9eef4f2efe4f5e3f4e9efee00
            0x000084d1      a914           lda #0x14                   ; load accumulator with memory
  |||||||   0x000084d3      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x000084d5      a90c           lda #0x0c                   ; load accumulator with memory
  |||||||   0x000084d7      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x000084d9      20004c         jsr 0x4c00       ; write text
            0x000084dc      c1e3ebeeeff7ece5e4e7e5ede5eef4f300
  |||||||   0x000084ed      a915           lda #0x15                   ; load accumulator with memory
  |||||||   0x000084ef      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x000084f1      a90b           lda #0x0b                   ; load accumulator with memory
  |||||||   0x000084f3      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x000084f5      20004c         jsr 0x4c00       ; write text
            0x000084f8      cef5ede2e5f2a0efe6a0e4f2e9f6e5f3ad??00 ; ?? value can be changed (b1=1, b2=2)
  |||||||   0x0000850b      20358d         jsr 0x8d35       ;
  |||||||   0x0000850e      a90e           lda #0x0e                   ; load accumulator with memory
  |||||||   0x00008510      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x00008512      a900           lda #0x00                   ; load accumulator with memory
  |||||||   0x00008514      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x00008516      20004c         jsr 0x4c00        ; write text
  ========< 0x00008519      1004           bpl 0x4f9108                ; branch on result plus
            0x0000851b      040404040404040404040404041ed3e5ece5e3f4baa01c04040404040404040404040404041200    
  |||||||   0x00008542      a90e           lda #0x0e         ; entry point for the main loop, good breakpoint
  |||||||   0x00008544      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x00008546      a917           lda #0x17                   ; load accumulator with memory
  |||||||   0x00008548      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x0000854a      202a4c         jsr 0x4c2a        ; main.subs
  --------> 0x0000854d      a50a           lda 0x0a                    ; load accumulator with memory
  |||||||   0x0000854f      48             pha                         ; push accumulator on stack
  |||||||   0x00008550      a912           lda #0x12                   ; load accumulator with memory
  |||||||   0x00008552      850a           sta 0x0a                    ; store accumulator in memory
  |||||||   0x00008554      205391         jsr 0x9153        ; main loop is behind this call, left on input
  |||||||   0x00008557      aa             tax                         ; transfer accumulator to index x
  |||||||   0x00008558      68             pla                         ; pull accumulator from stack
  |||||||   0x00008559      850a           sta 0x0a                    ; store accumulator in memory
  |||||||   0x0000855b      8a             txa                         ; transfer index x to accumulator
  |||||||   0x0000855c      c9e0           cmp #0xe0                   ; compare memory and accumulator
  ========< 0x0000855e      9002           bcc 0x4f9108                ; branch on carry clear
  |||||||   0x00008560      29df           and #0xdf                   ; "and" memory with accumulator
  --------> 0x00008562      48             pha                         ; push accumulator on stack
  |||||||   0x00008563      a9a0           lda #0xa0                   ; load accumulator with memory
  |||||||   0x00008565      20034c         jsr 0x4c03        ; main.subs
  |||||||   0x00008568      c6c9           dec 0xc9                    ; decrement memory by one
  |||||||   0x0000856a      68             pla                         ; pull accumulator from stack
  |||||||   0x0000856b      c9a0           cmp #0xa0         ; switch case table
  ========< 0x0000856d      f06a           beq 0x4f9108                ; branch on result zero
  |||||||   0x0000856f      c90d           cmp #0x0d                   ; compare memory and accumulator
  ========< 0x00008571      f066           beq 0x4f9108      ; 0x0d enter
  |||||||   0x00008573      c9d4           cmp #0xd4                   ; compare memory and accumulator
  ========< 0x00008575      f062           beq 0x4f9108                ; branch on result zero
  |||||||   0x00008577      c991           cmp #0x91                   ; compare memory and accumulator
  ========< 0x00008579      f030           beq 0x4f9108      ; 0x91 up
  |||||||   0x0000857b      c99d           cmp #0x9d                   ; compare memory and accumulator
  ========< 0x0000857d      f02c           beq 0x4f9108                ; branch on result zero
  |||||||   0x0000857f      c9ba           cmp #0xba                   ; compare memory and accumulator
  ========< 0x00008581      f028           beq 0x4f9108                ; branch on result zero
  |||||||   0x00008583      c9c0           cmp #0xc0                   ; compare memory and accumulator
  ========< 0x00008585      f024           beq 0x4f9108                ; branch on result zero
  |||||||   0x00008587      c9af           cmp #0xaf                   ; compare memory and accumulator
  ========< 0x00008589      f036           beq 0x4f9108                ; branch on result zero
  |||||||   0x0000858b      c911           cmp #0x11                   ; compare memory and accumulator
  ========< 0x0000858d      f032           beq 0x4f9108                ; branch on result zero
  |||||||   0x0000858f      c91d           cmp #0x1d                   ; compare memory and accumulator
  ========< 0x00008591      f02e           beq 0x4f9108                ; branch on result zero
  |||||||   0x00008593      c9bb           cmp #0xbb                   ; compare memory and accumulator
  ========< 0x00008595      f02a           beq 0x4f9108                ; branch on result zero
  |||||||   0x00008597      c9c1           cmp #0xc1                   ; compare memory and accumulator
  ========< 0x00008599      9004           bcc 0x4f9108                ; branch on carry clear
  |||||||   0x0000859b      c9d0           cmp #0xd0                   ; compare memory and accumulator
  ========< 0x0000859d      9003           bcc 0x4f9108                ; branch on carry clear
  ========< 0x0000859f      4c4d85         jmp 0x854d        ; default
  --------> 0x000085a2      290f           and #0x0f                   ; "and" memory with accumulator
  |||||||   0x000085a4      aa             tax                         ; transfer accumulator to index x
  |||||||   0x000085a5      20406c         jsr 0x6c40                  ; jump to new location saving return address
  ========< 0x000085a8      4c4d85         jmp 0x854d                  ; jump to new location
case $91 up:
  --------> 0x000085ab      a67b           ldx 0x7b                    ; load index x with memory
  |||||||   0x000085ad      ca             dex                         ; decrement index x by one
  ========< 0x000085ae      1003           bpl 0x4f9108                ; branch on result plus
  ========< 0x000085b0      4c4d85         jmp 0x854d                  ; jump to new location
  --------> 0x000085b3      20358d         jsr 0x8d35                  ; jump to new location saving return address
  |||||||   0x000085b6      c67b           dec 0x7b                    ; decrement memory by one
  |||||||   0x000085b8      20358d         jsr 0x8d35                  ; jump to new location saving return address
  |||||||   0x000085bb      20a84c         jsr 0x4ca8                  ; jump to new location saving return address
  ========< 0x000085be      4c4d85         jmp 0x854d                  ; jump to new location
case $11 down:
  --------> 0x000085c1      a67b           ldx 0x7b                    ; load index x with memory
  |||||||   0x000085c3      e8             inx                         ; increment index x by one
  |||||||   0x000085c4      e006           cpx #0x06                   ; compare memory and index x
  ========< 0x000085c6      9003           bcc 0x4f9108                ; branch on carry clear
  ========< 0x000085c8      4c4d85         jmp 0x854d       ; main loop
  --------> 0x000085cb      20358d         jsr 0x8d35                  ; jump to new location saving return address
  |||||||   0x000085ce      e67b           inc 0x7b                    ; increment memory by one
  |||||||   0x000085d0      20358d         jsr 0x8d35       ; 
  |||||||   0x000085d3      20a84c         jsr 0x4ca8       ; main.subs
  ========< 0x000085d6      4c4d85         jmp 0x854d       ; main loop

case 0x0d enter:
  --------> 0x000085d9      a57b           lda 0x7b                    ; load accumulator with memory
  |||||||   0x000085db      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x000085dc      a8             tay                         ; transfer accumulator to index y
  |||||||   0x000085dd      b9ea85         lda 0x85ea,y                ; load accumulator with memory
  |||||||   0x000085e0      85fe           sta 0xfe                    ; store accumulator in memory
  |||||||   0x000085e2      b9eb85         lda 0x85eb,y                ; load accumulator with memory
  |||||||   0x000085e5      85ff           sta 0xff                    ; store accumulator in memory
  |||||||   0x000085e7      6cfe00         jmp (0x00fe)                ; jump to new location
  |||||||   0x000085ea      f685                            ; variable (jump vector? 0x85f6)
  |||||||   0x000085ec      8486           sty 0x86                    ; store index y in memory
  |||||||   0x000085ee      ed875c         sbc 0x5c87                  ; subtract memory from accumulator with borrow
  |||||||   0x000085f1      8701           sax 0x01
  |||||||   0x000085f3      8900           nop #0x00                   ; no operation
  |||||||   0x000085f5      88             dey                         ; decrement index y by one

local:
  |||||||   0x000085f6      a200           ldx #0x00                   ; load index x with memory
  |||||||   0x000085f8      20406c         jsr 0x6c40       ; temp.subs
  |||||||   0x000085fb      38             sec                         ; set carry flag
  |||||||   0x000085fc      6688           ror 0x88                    ; rotate one bit right (memory or accumulator)
  |||||||   0x000085fe      a201           ldx #0x01                   ; load index x with memory
  |||||||   0x00008600      20246c         jsr 0x6c24       ; load file from disk, filename in memory after calling code, does not return
            0x00008603      45 4e 54 45 52 2e 50 4c 41 59 00 ; "ENTER.PLAY"

(): call after load S2, S1
  |||||||   0x0000860e      85fd           sta 0xfd                    ; store accumulator in memory
  |||||||   0x00008610      a9c0           lda #0xc0                   ; load accumulator with memory
  |||||||   0x00008612      85ff           sta 0xff                    ; store accumulator in memory
  |||||||   0x00008614      20066c         jsr 0x6c06       ; set memory banking: set ram visible in all areas
  |||||||   0x00008617      a000           ldy #0x00                   ; load index y with memory
  |||||||   0x00008619      84fe           sty 0xfe                    ; store index y in memory
  |||||||   0x0000861b      84fc           sty 0xfc                    ; store index y in memory
  |||||||   0x0000861d      a210           ldx #0x10                   ; load index x with memory
  --------> 0x0000861f      b1fe           lda (0xfe),y                ; load accumulator with memory
  |||||||   0x00008621      91fc           sta (0xfc),y                ; store accumulator in memory
  |||||||   0x00008623      c8             iny                         ; increment index y by one
  ========< 0x00008624      d0f9           bne 0x4f9108                ; branch on result not zero
  |||||||   0x00008626      e6ff           inc 0xff                    ; increment memory by one
  |||||||   0x00008628      e6fd           inc 0xfd                    ; increment memory by one
  |||||||   0x0000862a      ca             dex                         ; decrement index x by one
  ========< 0x0000862b      d0f2           bne 0x4f9108                ; branch on result not zero
  ========< 0x0000862d      4c036c         jmp 0x6c03       ; set memory banking: set kernal and io visible and rts
  
  |||||||   0x00008630      a910           lda #0x10                   ; load accumulator with memory
  |||||||   0x00008632      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x00008634      a206           ldx #0x06                   ; load index x with memory
  --------> 0x00008636      a902           lda #0x02                   ; load accumulator with memory
  |||||||   0x00008638      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x0000863a      a024           ldy #0x24                   ; load index y with memory
  --------> 0x0000863c      a9a0           lda #0xa0                   ; load accumulator with memory
  |||||||   0x0000863e      20034c         jsr 0x4c03                  ; jump to new location saving return address
  |||||||   0x00008641      88             dey                         ; decrement index y by one
  ========< 0x00008642      d0f8           bne 0x4f9108                ; branch on result not zero
  |||||||   0x00008644      e6ca           inc 0xca                    ; increment memory by one
  |||||||   0x00008646      ca             dex                         ; decrement index x by one
  ========< 0x00008647      d0ed           bne 0x4f9108                ; branch on result not zero
  |||||||   0x00008649      60             rts                         ; return from subroutine
  |||||||   0x0000864a      a000           ldy #0x00                   ; load index y with memory
  --------> 0x0000864c      a2b5           ldx #0xb5                   ; load index x with memory
  |||||||   0x0000864e      a991           lda #0x91                   ; load accumulator with memory
  |||||||   0x00008650      205d91         jsr 0x915d                  ; jump to new location saving return address
  |||||||   0x00008653      c985           cmp #0x85                   ; compare memory and accumulator
  ========< 0x00008655      f02b           beq 0x4f9108                ; branch on result zero
  |||||||   0x00008657      c90d           cmp #0x0d                   ; compare memory and accumulator
  ========< 0x00008659      d00e           bne 0x4f9108                ; branch on result not zero
  |||||||   0x0000865b      98             tya                         ; transfer index y to accumulator
  ========< 0x0000865c      f024           beq 0x4f9108                ; branch on result zero
  |||||||   0x0000865e      88             dey                         ; decrement index y by one
  |||||||   0x0000865f      b900bf         lda 0xbf00,y                ; load accumulator with memory
  |||||||   0x00008662      297f           and #0x7f                   ; "and" memory with accumulator
  |||||||   0x00008664      9900bf         sta 0xbf00,y                ; store accumulator in memory
  |||||||   0x00008667      38             sec                         ; set carry flag
  |||||||   0x00008668      60             rts                         ; return from subroutine
  --------> 0x00008669      c988           cmp #0x88                   ; compare memory and accumulator
  ========< 0x0000866b      d008           bne 0x4f9108                ; branch on result not zero
  |||||||   0x0000866d      98             tya                         ; transfer index y to accumulator
  ========< 0x0000866e      f0dc           beq 0x4f9108                ; branch on result zero
  |||||||   0x00008670      88             dey                         ; decrement index y by one
  |||||||   0x00008671      c6c9           dec 0xc9                    ; decrement memory by one
  ========< 0x00008673      d0d7           bne 0x4f9108                ; branch on result not zero
  --------> 0x00008675      c008           cpy #0x08                   ; compare memory and index y
  ========< 0x00008677      f0d3           beq 0x4f9108                ; branch on result zero
  |||||||   0x00008679      9900bf         sta 0xbf00,y                ; store accumulator in memory
  |||||||   0x0000867c      20034c         jsr 0x4c03                  ; jump to new location saving return address
  |||||||   0x0000867f      c8             iny                         ; increment index y by one
  ========< 0x00008680      d0ca           bne 0x4f9108                ; branch on result not zero
  --------> 0x00008682      18             clc                         ; clear carry flag
  |||||||   0x00008683      60             rts                         ; return from subroutine
  |||||||   0x00008684      a90e           lda #0x0e                   ; load accumulator with memory
  |||||||   0x00008686      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x00008688      a901           lda #0x01                   ; load accumulator with memory
  |||||||   0x0000868a      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x0000868c      20004c         jsr 0x4c00                  ; jump to new location saving return address
  |||||||   0x0000868f      0404           nop 0x04                    ; no operation
  |||||||   0x00008691      0404           nop 0x04                    ; no operation
  |||||||   0x00008693      0404           nop 0x04                    ; no operation
  |||||||   0x00008695      0404           nop 0x04                    ; no operation
  |||||||   0x00008697      0404           nop 0x04                    ; no operation
  |||||||   0x00008699      0404           nop 0x04                    ; no operation
  |||||||   0x0000869b      0404           nop 0x04                    ; no operation
  |||||||   0x0000869d      0404           nop 0x04                    ; no operation
  |||||||   0x0000869f      0404           nop 0x04                    ; no operation
  |||||||   0x000086a1      0404           nop 0x04                    ; no operation
  |||||||   0x000086a3      0404           nop 0x04                    ; no operation
  |||||||   0x000086a5      0404           nop 0x04                    ; no operation
  |||||||   0x000086a7      0404           nop 0x04                    ; no operation
  |||||||   0x000086a9      0404           nop 0x04                    ; no operation
  |||||||   0x000086ab      0404           nop 0x04                    ; no operation
  |||||||   0x000086ad      0404           nop 0x04                    ; no operation
  |||||||   0x000086af      0404           nop 0x04                    ; no operation
  |||||||   0x000086b1      0404           nop 0x04                    ; no operation
  |||||||   0x000086b3      0404           nop 0x04                    ; no operation
  |||||||   0x000086b5      00             brk                         ; force break
  |||||||   0x000086b6      203086         jsr 0x8630                  ; jump to new location saving return address
  |||||||   0x000086b9      a910           lda #0x10                   ; load accumulator with memory
  |||||||   0x000086bb      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x000086bd      a903           lda #0x03                   ; load accumulator with memory
  |||||||   0x000086bf      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x000086c1      20004c         jsr 0x4c00                  ; jump to new location saving return address
  |||||||   0x000086c4      c2f9           nop #0xf9                   ; no operation
  |||||||   0x000086c6      a0f7           ldy #0xf7                   ; load index y with memory
  |||||||   0x000086c8      e8             inx                         ; increment index x by one
  |||||||   0x000086c9      e1f4           sbc (0xf4,x)                ; subtract memory from accumulator with borrow
  |||||||   0x000086cb      a0ee           ldy #0xee                   ; load index y with memory
  |||||||   0x000086cd      e1ed           sbc (0xed,x)                ; subtract memory from accumulator with borrow
  |||||||   0x000086cf      e5a0           sbc 0xa0                    ; subtract memory from accumulator with borrow
  |||||||   0x000086d1      f3e8           isb (0xe8),y
  |||||||   0x000086d3      e1ec           sbc (0xec,x)                ; subtract memory from accumulator with borrow
  |||||||   0x000086d5      f4a0           nop 0xa0,x                  ; no operation
  |||||||   0x000086d7      f4e8           nop 0xe8,x                  ; no operation
  |||||||   0x000086d9      eff5a0         isb 0xa0f5
  |||||||   0x000086dc      e2e5           nop #0xe5                   ; no operation
  |||||||   0x000086de      a0eb           ldy #0xeb                   ; load index y with memory
  |||||||   0x000086e0      eeeff7         inc 0xf7ef                  ; increment memory by one
  |||||||   0x000086e3      eebf00         inc 0x00bf                  ; increment memory by one
  |||||||   0x000086e6      a912           lda #0x12                   ; load accumulator with memory
  |||||||   0x000086e8      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x000086ea      a90e           lda #0x0e                   ; load accumulator with memory
  |||||||   0x000086ec      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x000086ee      20004c         jsr 0x4c00                  ; jump to new location saving return address
  |||||||   0x000086f1      ba             tsx                         ; transfer stack pointer to index x
  |||||||   0x000086f2      00             brk                         ; force break
  |||||||   0x000086f3      204a86         jsr 0x864a                  ; jump to new location saving return address
  ========< 0x000086f6      905b           bcc 0x4f9108                ; branch on carry clear
  |||||||   0x000086f8      a914           lda #0x14                   ; load accumulator with memory
  |||||||   0x000086fa      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x000086fc      a907           lda #0x07                   ; load accumulator with memory
  |||||||   0x000086fe      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x00008700      20004c         jsr 0x4c00                  ; jump to new location saving return address
  |||||||   0x00008703      c1f2           cmp (0xf2,x)                ; compare memory and accumulator
  |||||||   0x00008705      f4a0           nop 0xa0,x                  ; no operation
  |||||||   0x00008707      f4e8           nop 0xe8,x                  ; no operation
  |||||||   0x00008709      eff5a0         isb 0xa0f5
  |||||||   0x0000870c      cde1ec         cmp 0xece1                  ; compare memory and accumulator
  |||||||   0x0000870f      e5a0           sbc 0xa0                    ; subtract memory from accumulator with borrow
  |||||||   0x00008711      eff2a0         isb 0xa0f2
  |||||||   0x00008714      c6e5           dec 0xe5                    ; decrement memory by one
  |||||||   0x00008716      ede1ec         sbc 0xece1                  ; subtract memory from accumulator with borrow
  |||||||   0x00008719      e5bf           sbc 0xbf                    ; subtract memory from accumulator with borrow
  |||||||   0x0000871b      a000           ldy #0x00                   ; load index y with memory
  --------> 0x0000871d      205991         jsr 0x9159                  ; jump to new location saving return address
  |||||||   0x00008720      c9e0           cmp #0xe0                   ; compare memory and accumulator
  ========< 0x00008722      9002           bcc 0x4f9108                ; branch on carry clear
  |||||||   0x00008724      29df           and #0xdf                   ; "and" memory with accumulator
  --------> 0x00008726      c985           cmp #0x85                   ; compare memory and accumulator
  ========< 0x00008728      f029           beq 0x4f9108                ; branch on result zero
  |||||||   0x0000872a      c9cd           cmp #0xcd                   ; compare memory and accumulator
  ========< 0x0000872c      f007           beq 0x4f9108                ; branch on result zero
  |||||||   0x0000872e      c9c6           cmp #0xc6                   ; compare memory and accumulator
  ========< 0x00008730      f003           beq 0x4f9108                ; branch on result zero
  ========< 0x00008732      4c1d87         jmp 0x871d                  ; jump to new location
  --------> 0x00008735      a23e           ldx #0x3e                   ; load index x with memory
  |||||||   0x00008737      c9cd           cmp #0xcd                   ; compare memory and accumulator
  ========< 0x00008739      f001           beq 0x4f9108                ; branch on result zero
  |||||||   0x0000873b      ca             dex                         ; decrement index x by one
  --------> 0x0000873c      8e80bf         stx 0xbf80                  ; store index x in memory
  |||||||   0x0000873f      20034c         jsr 0x4c03                  ; jump to new location saving return address
  |||||||   0x00008742      a200           ldx #0x00                   ; load index x with memory
  |||||||   0x00008744      20406c         jsr 0x6c40                  ; jump to new location saving return address
  |||||||   0x00008747      a201           ldx #0x01                   ; load index x with memory
  |||||||   0x00008749      20246c         jsr 0x6c24                  ; jump to new location saving return address
  |||||||   0x0000874c      4352           sre (0x52,x)
  |||||||   0x0000874e      4541           eor 0x41                    ; "exclusive-or" memory with accumulator
  |||||||   0x00008750      5445           nop 0x45,x                  ; no operation
  |||||||   0x00008752      00             brk                         ; force break
  --------> 0x00008753      20cb8b         jsr 0x8bcb                  ; jump to new location saving return address
  |||||||   0x00008756      20708d         jsr 0x8d70                  ; jump to new location saving return address
  ========< 0x00008759      4c5384         jmp 0x8453                  ; jump to new location
  |||||||   0x0000875c      a200           ldx #0x00                   ; load index x with memory
  |||||||   0x0000875e      20246c         jsr 0x6c24                  ; jump to new location saving return address
  |||||||   0x00008761      464f           lsr 0x4f                    ; shift right one bit (memory or accumulator)
  |||||||   0x00008763      4e5433         lsr 0x3354                  ; shift right one bit (memory or accumulator)
  |||||||   0x00008766      2a             rol a                       ; rotate one bit left (memory or accumulator)
  |||||||   0x00008767      00             brk                         ; force break
  --------> 0x00008768      a944           lda #0x44                   ; load accumulator with memory
  |||||||   0x0000876a      202a6c         jsr 0x6c2a                  ; jump to new location saving return address
  ========< 0x0000876d      906e           bcc 0x4f9108                ; branch on carry clear
  |||||||   0x0000876f      a917           lda #0x17                   ; load accumulator with memory
  |||||||   0x00008771      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x00008773      a901           lda #0x01                   ; load accumulator with memory
  |||||||   0x00008775      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x00008777      20004c         jsr 0x4c00                  ; jump to new location saving return address
  |||||||   0x0000877a      02             hlt
  |||||||   0x0000877b      02             hlt
  |||||||   0x0000877c      02             hlt
  |||||||   0x0000877d      02             hlt
  |||||||   0x0000877e      02             hlt
  |||||||   0x0000877f      02             hlt
  |||||||   0x00008780      02             hlt
  |||||||   0x00008781      1ec9ee         asl 0xeec9,x                ; shift left one bit (memory or accumulator)
  |||||||   0x00008784      f3e5           isb (0xe5),y
  |||||||   0x00008786      f2             hlt
  |||||||   0x00008787      f4a0           nop 0xa0,x                  ; no operation
  |||||||   0x00008789      c4d7           cpy 0xd7                    ; compare memory and index y
  |||||||   0x0000878b      c5cc           cmp 0xcc                    ; compare memory and accumulator
  |||||||   0x0000878d      ccc9ce         cpy 0xcec9                  ; compare memory and index y
  |||||||   0x00008790      c7a0           dcp 0xa0
  |||||||   0x00008792      e4e9           cpx 0xe9                    ; compare memory and index x
  |||||||   0x00008794      f3eb           isb (0xeb),y
  |||||||   0x00008796      ba             tsx                         ; transfer stack pointer to index x
  |||||||   0x00008797      801c           nop #0x1c                   ; no operation
  |||||||   0x00008799      02             hlt
  |||||||   0x0000879a      02             hlt
  |||||||   0x0000879b      02             hlt
  |||||||   0x0000879c      02             hlt
  |||||||   0x0000879d      02             hlt
  |||||||   0x0000879e      02             hlt
  |||||||   0x0000879f      02             hlt
  |||||||   0x000087a0      00             brk                         ; force break
  |||||||   0x000087a1      a91e           lda #0x1e                   ; load accumulator with memory
  |||||||   0x000087a3      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x000087a5      205991         jsr 0x9159                  ; jump to new location saving return address
  |||||||   0x000087a8      a917           lda #0x17                   ; load accumulator with memory
  |||||||   0x000087aa      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x000087ac      a901           lda #0x01                   ; load accumulator with memory
  |||||||   0x000087ae      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x000087b0      20004c         jsr 0x4c00                  ; jump to new location saving return address
  |||||||   0x000087b3      02             hlt
  |||||||   0x000087b4      02             hlt
  |||||||   0x000087b5      02             hlt
  |||||||   0x000087b6      02             hlt
  |||||||   0x000087b7      02             hlt
  |||||||   0x000087b8      02             hlt
  |||||||   0x000087b9      02             hlt
  |||||||   0x000087ba      02             hlt
  |||||||   0x000087bb      02             hlt
  |||||||   0x000087bc      02             hlt
  |||||||   0x000087bd      02             hlt
  |||||||   0x000087be      02             hlt
  |||||||   0x000087bf      02             hlt
  |||||||   0x000087c0      02             hlt
  |||||||   0x000087c1      02             hlt
  |||||||   0x000087c2      02             hlt
  |||||||   0x000087c3      02             hlt
  |||||||   0x000087c4      02             hlt
  |||||||   0x000087c5      02             hlt
  |||||||   0x000087c6      02             hlt
  |||||||   0x000087c7      02             hlt
  |||||||   0x000087c8      02             hlt
  |||||||   0x000087c9      02             hlt
  |||||||   0x000087ca      02             hlt
  |||||||   0x000087cb      02             hlt
  |||||||   0x000087cc      02             hlt
  |||||||   0x000087cd      02             hlt
  |||||||   0x000087ce      02             hlt
  |||||||   0x000087cf      02             hlt
  |||||||   0x000087d0      02             hlt
  |||||||   0x000087d1      02             hlt
  |||||||   0x000087d2      02             hlt
  |||||||   0x000087d3      02             hlt
  |||||||   0x000087d4      02             hlt
  |||||||   0x000087d5      02             hlt
  |||||||   0x000087d6      02             hlt
  |||||||   0x000087d7      02             hlt
  |||||||   0x000087d8      02             hlt
  |||||||   0x000087d9      00             brk                         ; force break
  ========< 0x000087da      4c6887         jmp 0x8768                  ; jump to new location
  --------> 0x000087dd      a200           ldx #0x00                   ; load index x with memory
  |||||||   0x000087df      20406c         jsr 0x6c40                  ; jump to new location saving return address
  |||||||   0x000087e2      a201           ldx #0x01                   ; load index x with memory
  |||||||   0x000087e4      20246c         jsr 0x6c24                  ; jump to new location saving return address
  |||||||   0x000087e7      5354           sre (0x54),y
  |||||||   0x000087e9      4f5259         sre 0x5952
  |||||||   0x000087ec      00             brk                         ; force break
  |||||||   0x000087ed      a200           ldx #0x00                   ; load index x with memory
  |||||||   0x000087ef      20406c         jsr 0x6c40                  ; jump to new location saving return address
  |||||||   0x000087f2      a201           ldx #0x01                   ; load index x with memory
  |||||||   0x000087f4      20246c         jsr 0x6c24                  ; jump to new location saving return address
  |||||||   0x000087f7      5452           nop 0x52,x                  ; no operation
  |||||||   0x000087f9      414e           eor (0x4e,x)                ; "exclusive-or" memory with accumulator
  |||||||   0x000087fb      5346           sre (0x46),y
  |||||||   0x000087fd      4552           eor 0x52                    ; "exclusive-or" memory with accumulator
  |||||||   0x000087ff      00             brk                         ; force break
  |||||||   0x00008800      ad5e8f         lda 0x8f5e                  ; load accumulator with memory
  ========< 0x00008803      d025           bne 0x4f9108                ; branch on result not zero
  |||||||   0x00008805      a5c8           lda 0xc8                    ; load accumulator with memory
  |||||||   0x00008807      4901           eor #0x01                   ; "exclusive-or" memory with accumulator
  |||||||   0x00008809      85c8           sta 0xc8                    ; store accumulator in memory
  |||||||   0x0000880b      2901           and #0x01                   ; "and" memory with accumulator
  ========< 0x0000880d      d00b           bne 0x4f9108                ; branch on result not zero
  |||||||   0x0000880f      a9b1           lda #0xb1                   ; load accumulator with memory
  |||||||   0x00008811      8d0985         sta 0x8509                  ; store accumulator in memory
  |||||||   0x00008814      20358d         jsr 0x8d35                  ; jump to new location saving return address
  ========< 0x00008817      4c5384         jmp 0x8453                  ; jump to new location
  --------> 0x0000881a      209f4c         jsr 0x4c9f                  ; jump to new location saving return address
  |||||||   0x0000881d      a909           lda #0x09                   ; load accumulator with memory
  |||||||   0x0000881f      20e688         jsr 0x88e6                  ; jump to new location saving return address
  ========< 0x00008822      f006           beq 0x4f9108                ; branch on result zero
  |||||||   0x00008824      203388         jsr 0x8833                  ; jump to new location saving return address
  `=======< 0x00008827      4c1784         jmp 0x8417                  ; jump to new location
  --------> 0x0000882a      20358d         jsr 0x8d35                  ; jump to new location saving return address
   ||||||   0x0000882d      20a24c         jsr 0x4ca2                  ; jump to new location saving return address
   ||`====< 0x00008830      4c1784         jmp 0x8417                  ; jump to new location
   || |||   0x00008833      a908           lda #0x08                   ; load accumulator with memory
   || |||   0x00008835      a2d6           ldx #0xd6                   ; load index x with memory
   || |||   0x00008837      a088           ldy #0x88                   ; load index y with memory
   || |||   0x00008839      20bdff         jsr 0xffbd       ; SETNAM. Set file name parameters.
   || |||   0x0000883c      a90f           lda #0x0f                   ; load accumulator with memory
   || |||   0x0000883e      a208           ldx #0x08                   ; load index x with memory
   || |||   0x00008840      a8             tay                         ; transfer accumulator to index y
   || |||   0x00008841      20baff         jsr 0xffba       ; SETLFS. Set file parameters.
   || |||   0x00008844      20c0ff         jsr 0xffc0       ; OPEN. Open file. (Must call SETLFS and SETNAM beforehands.) "M-W" @ 0x0077  (Serial bus LISTEN command to accept)
   || |||   0x00008847      a90f           lda #0x0f                   ; load accumulator with memory
   || |||   0x00008849      20c3ff         jsr 0xffc3       ; CLOSE. Close file.
   || |||   0x0000884c      a909           lda #0x09                   ; load accumulator with memory
   || |||   0x0000884e      8d336c         sta 0x6c33                  ; store accumulator in memory
   || |||   0x00008851      20a24c         jsr 0x4ca2                  ; jump to new location saving return address
   || |||   0x00008854      20cb8b         jsr 0x8bcb                  ; jump to new location saving return address
   || |||   0x00008857      a912           lda #0x12                   ; load accumulator with memory
   || |||   0x00008859      85ca           sta 0xca                    ; store accumulator in memory
   || |||   0x0000885b      a907           lda #0x07                   ; load accumulator with memory
   || |||   0x0000885d      85c9           sta 0xc9                    ; store accumulator in memory
   || |||   0x0000885f      20004c         jsr 0x4c00                  ; jump to new location saving return address
   || |||   0x00008862      d4f5           nop 0xf5,x                  ; no operation
   || |||   0x00008864      f2             hlt
   || |||   0x00008865      eea0ef         inc 0xefa0                  ; increment memory by one
   || |||   0x00008868      eea0f3         inc 0xf3a0                  ; increment memory by one
   || |||   0x0000886b      e5e3           sbc 0xe3                    ; subtract memory from accumulator with borrow
   || |||   0x0000886d      efeee4         isb 0xe4ee
   || |||   0x00008870      a0e4           ldy #0xe4                   ; load index y with memory
   || |||   0x00008872      f2             hlt
   || |||   0x00008873      e9f6           sbc #0xf6                   ; subtract memory from accumulator with borrow
   || |||   0x00008875      e5a0           sbc 0xa0                    ; subtract memory from accumulator with borrow
   || |||   0x00008877      eeeff7         inc 0xf7ef                  ; increment memory by one
   || |||   0x0000887a      ba             tsx                         ; transfer stack pointer to index x
   || |||   0x0000887b      00             brk                         ; force break
   ||.----> 0x0000887c      204e4c         jsr 0x4c4e                  ; jump to new location saving return address
  ,=======< 0x0000887f      3015           bmi 0x4f9108                ; branch on result minus
  |||||||   0x00008881      207a8a         jsr 0x8a7a                  ; jump to new location saving return address
  |||||||   0x00008884      a980           lda #0x80                   ; load accumulator with memory
  |||||||   0x00008886      20034c         jsr 0x4c03                  ; jump to new location saving return address
  |||||||   0x00008889      c6c9           dec 0xc9                    ; decrement memory by one
  |||||||   0x0000888b      205a4c         jsr 0x4c5a                  ; jump to new location saving return address
  |||||||   0x0000888e      a950           lda #0x50                   ; load accumulator with memory
  |||||||   0x00008890      20018b         jsr 0x8b01                  ; jump to new location saving return address
  |||`====< 0x00008893      4c7c88         jmp 0x887c                  ; jump to new location
  `-------> 0x00008896      20cb8b         jsr 0x8bcb                  ; jump to new location saving return address
   || |||   0x00008899      a20a           ldx #0x0a                   ; load index x with memory
   ||.----> 0x0000889b      a9ff           lda #0xff                   ; load accumulator with memory
   ||||||   0x0000889d      38             sec                         ; set carry flag
  .-------> 0x0000889e      48             pha                         ; push accumulator on stack
  --------> 0x0000889f      e901           sbc #0x01                   ; subtract memory from accumulator with borrow
  ========< 0x000088a1      d0fc           bne 0x4f9108                ; branch on result not zero
  |||||||   0x000088a3      68             pla                         ; pull accumulator from stack
  |||||||   0x000088a4      e901           sbc #0x01                   ; subtract memory from accumulator with borrow
  `=======< 0x000088a6      d0f6           bne 0x4f9108                ; branch on result not zero
   ||||||   0x000088a8      ca             dex                         ; decrement index x by one
   ||`====< 0x000088a9      d0f0           bne 0x4f9108                ; branch on result not zero
   || |||   0x000088ab      209f4c         jsr 0x4c9f                  ; jump to new location saving return address
   || |||   0x000088ae      a908           lda #0x08                   ; load accumulator with memory
   || |||   0x000088b0      20e688         jsr 0x88e6                  ; jump to new location saving return address
   ||,====< 0x000088b3      f01e           beq 0x4f9108                ; branch on result zero
   ||||||   0x000088b5      a908           lda #0x08                   ; load accumulator with memory
   ||||||   0x000088b7      a2de           ldx #0xde                   ; load index x with memory
   ||||||   0x000088b9      a088           ldy #0x88                   ; load index y with memory
   ||||||   0x000088bb      20bdff         jsr 0xffbd       ; SETNAM. Set file name parameters.
   ||||||   0x000088be      a90f           lda #0x0f                   ; load accumulator with memory
   ||||||   0x000088c0      a209           ldx #0x09                   ; load index x with memory
   ||||||   0x000088c2      a8             tay                         ; transfer accumulator to index y
   ||||||   0x000088c3      20baff         jsr 0xffba       ; SETLFS. Set file parameters.
   ||||||   0x000088c6      20c0ff         jsr 0xffc0       ; OPEN. Open file. (Must call SETLFS and SETNAM beforehands.)
   ||||||   0x000088c9      a90f           lda #0x0f                   ; load accumulator with memory
   ||||||   0x000088cb      20c3ff         jsr 0xffc3       ; CLOSE. Close file.
   ||||||   0x000088ce      a908           lda #0x08                   ; load accumulator with memory
   ||||||   0x000088d0      8d336c         sta 0x6c33                  ; store accumulator in memory
   |``----> 0x000088d3      4ca24c         jmp 0x4ca2                  ; jump to new location
   |  |||   0x000088d6      4d2d577700 02 29 49
   |  |||   0x000088dc      2949           and #0x49                   ; "and" memory with accumulator
   |  |||   0x000088de      4d2d577700 02 28 48

local: reopen secondary channel 15
   |  |||   0x000088e6      a200           ldx #0x00                   ; load index x with memory
   |  |||   0x000088e8      8690           stx 0x90                    ; store index x in memory
   |  |||   0x000088ea      20b1ff         jsr 0xffb1       ; LISTEN. Send LISTEN command to serial bus. A = Device number.
   |  |||   0x000088ed      a96f           lda #0x6f                   ; load accumulator with memory
   |  |||   0x000088ef      2093ff         jsr 0xff93       ; LSTNSA. Send LISTEN secondary address to serial bus. A = Secondary address. $6f: reopen channel 15
   |  |||   0x000088f2      20aeff         jsr 0xffae       ; UNLSTN. Send UNLISTEN command to serial bus.
   |  |||   0x000088f5      2490           bit 0x90                    ; test bits in memory with accumulator
   |  |||   0x000088f7      60             rts                         ; return from subroutine

   |  |||   0x000088f8      20708d         jsr 0x8d70                  ; jump to new location saving return address
   |  |||   0x000088fb      209b93         jsr 0x939b                  ; jump to new location saving return address
   |  `===< 0x000088fe      4c0a84         jmp 0x840a                  ; jump to new location
   |   ||   0x00008901      a200           ldx #0x00                   ; load index x with memory
   |   ||   0x00008903      20406c         jsr 0x6c40                  ; jump to new location saving return address
   |   ||   0x00008906      a200           ldx #0x00                   ; load index x with memory
   |   ||   0x00008908      20246c         jsr 0x6c24                  ; jump to new location saving return address
   |   ||   0x0000890b      4142           eor (0x42,x)                ; "exclusive-or" memory with accumulator
   |   ||   0x0000890d      4f5554         sre 0x5455
   |   ||   0x00008910      00             brk                         ; force break
   |   ||   0x00008911      a9f0           lda #0xf0                   ; load accumulator with memory
   |   ||   0x00008913      209689         jsr 0x8996                  ; jump to new location saving return address
   |   ||   0x00008916      a900           lda #0x00                   ; load accumulator with memory
   |   ||   0x00008918      85fe           sta 0xfe                    ; store accumulator in memory
   |   ||   0x0000891a      85fc           sta 0xfc                    ; store accumulator in memory
   |   ||   0x0000891c      a9aa           lda #0xaa                   ; load accumulator with memory
   |   ||   0x0000891e      85ff           sta 0xff                    ; store accumulator in memory
   |   ||   0x00008920      a92a           lda #0x2a                   ; load accumulator with memory
   |   ||   0x00008922      85fd           sta 0xfd                    ; store accumulator in memory
   |   ||   0x00008924      a000           ldy #0x00                   ; load index y with memory
   | ..---> 0x00008926      b1fe           lda (0xfe),y                ; load accumulator with memory
   | ||||   0x00008928      91fc           sta (0xfc),y                ; store accumulator in memory
   | ||||   0x0000892a      c8             iny                         ; increment index y by one
   | `====< 0x0000892b      d0f9           bne 0x4f9108                ; branch on result not zero
   |  |||   0x0000892d      e6ff           inc 0xff                    ; increment memory by one
   |  |||   0x0000892f      e6fd           inc 0xfd                    ; increment memory by one
   |  |||   0x00008931      a5fd           lda 0xfd                    ; load accumulator with memory
   |  |||   0x00008933      c940           cmp #0x40                   ; compare memory and accumulator
   |  `===< 0x00008935      d0ef           bne 0x4f9108                ; branch on result not zero
   |   ||   0x00008937      a200           ldx #0x00                   ; load index x with memory
   |   ||   0x00008939      20246c         jsr 0x6c24                  ; jump to new location saving return address
   |   ||   0x0000893c      464c           lsr 0x4c                    ; shift right one bit (memory or accumulator)
   |   ||   0x0000893e      414d           eor (0x4d,x)                ; "exclusive-or" memory with accumulator
   |   ||   0x00008940      4553           eor 0x53                    ; "exclusive-or" memory with accumulator
   |   ||   0x00008942      00             brk                         ; force break
   |   ||   0x00008943      a940           lda #0x40                   ; load accumulator with memory
   |   ||   0x00008945      8dee91         sta 0x91ee                  ; store accumulator in memory
   |   ||   0x00008948      a9a0           lda #0xa0                   ; load accumulator with memory
   |   ||   0x0000894a      20ed91         jsr 0x91ed                  ; jump to new location saving return address
   |   ||   0x0000894d      a9c0           lda #0xc0                   ; load accumulator with memory
   |   ||   0x0000894f      8dee91         sta 0x91ee                  ; store accumulator in memory
   |  .---> 0x00008952      a200           ldx #0x00                   ; load index x with memory
   |  |||   0x00008954      20246c         jsr 0x6c24                  ; jump to new location saving return address
   |  |`==< 0x00008957      4c4f47         jmp 0x474f                  ; jump to new location
   |  | |   0x0000895a      4f2e43         sre 0x432e
   |  | |   0x0000895d      4f4c4f         sre 0x4f4c
      | |   0x00008960      52             hlt
      | |   0x00008961      5300           sre (0x00),y
      `===< 0x00008963      b0ed           bcs 0x4f9108                ; branch on carry set
        |   0x00008965      20318a         jsr 0x8a31                  ; jump to new location saving return address
        |   0x00008968      a201           ldx #0x01                   ; load index x with memory
        |   0x0000896a      20406c         jsr 0x6c40                  ; jump to new location saving return address
       .--> 0x0000896d      20e4ff         jsr 0xffe4       ; GETIN. Read byte from default input. (If not keyboard, must call OPEN and CHKIN beforehands.)
       `==< 0x00008970      f0fb           beq 0x4f9108                ; branch on result zero
        |   0x00008972      a910           lda #0x10                   ; load accumulator with memory
        |   0x00008974      209689         jsr 0x8996                  ; jump to new location saving return address
        |   0x00008977      a200           ldx #0x00                   ; load index x with memory
       .--> 0x00008979      bd0010         lda 0x1000,x                ; load accumulator with memory
       ||   0x0000897c      9d0004         sta 0x0400,x                ; store accumulator in memory
       ||   0x0000897f      bd0011         lda 0x1100,x                ; load accumulator with memory
       ||   0x00008982      9d0005         sta 0x0500,x                ; store accumulator in memory
       ||   0x00008985      bd8011         lda 0x1180,x                ; load accumulator with memory
       ||   0x00008988      9d8005         sta 0x0580,x                ; store accumulator in memory
       ||   0x0000898b      ca             dex                         ; decrement index x by one
       `==< 0x0000898c      d0eb           bne 0x4f9108                ; branch on result not zero
        |   0x0000898e      a921           lda #0x21                   ; load accumulator with memory
        |   0x00008990      20488a         jsr 0x8a48                  ; jump to new location saving return address
        `=< 0x00008993      4c0a84         jmp 0x840a                  ; jump to new location
            0x00008996      8dc689         sta 0x89c6                  ; store accumulator in memory
            0x00008999      a238           ldx #0x38                   ; load index x with memory
        .-> 0x0000899b      bd0014         lda 0x1400,x                ; load accumulator with memory
        |   0x0000899e      852d           sta 0x2d                    ; store accumulator in memory
        |   0x000089a0      bdc014         lda 0x14c0,x                ; load accumulator with memory
        |   0x000089a3      852e           sta 0x2e                    ; store accumulator in memory
        |   0x000089a5      a928           lda #0x28                   ; load accumulator with memory
        |   0x000089a7      8dd489         sta 0x89d4                  ; store accumulator in memory
        |   0x000089aa      a000           ldy #0x00                   ; load index y with memory
       .--> 0x000089ac      a900           lda #0x00                   ; load accumulator with memory
       ||   0x000089ae      912d           sta (0x2d),y                ; store accumulator in memory
       ||   0x000089b0      98             tya                         ; transfer index y to accumulator
       ||   0x000089b1      18             clc                         ; clear carry flag
       ||   0x000089b2      6908           adc #0x08                   ; add memory to accumulator with carry
       ||   0x000089b4      a8             tay                         ; transfer accumulator to index y
      ,===< 0x000089b5      9002           bcc 0x4f9108                ; branch on carry clear
      |||   0x000089b7      e62e           inc 0x2e                    ; increment memory by one
      `---> 0x000089b9      ced489         dec 0x89d4                  ; decrement memory by one
       `==< 0x000089bc      d0ee           bne 0x4f9108                ; branch on result not zero
        |   0x000089be      e8             inx                         ; increment index x by one
        |   0x000089bf      e0c0           cpx #0xc0                   ; compare memory and index x
        `=< 0x000089c1      d0d8           bne 0x4f9108                ; branch on result not zero
            0x000089c3      a000           ldy #0x00                   ; load index y with memory
            0x000089c5      a910           lda #0x10                   ; load accumulator with memory
        .-> 0x000089c7      994005         sta 0x0540,y                ; store accumulator in memory
        |   0x000089ca      990006         sta 0x0600,y                ; store accumulator in memory
        |   0x000089cd      990007         sta 0x0700,y                ; store accumulator in memory
        |   0x000089d0      88             dey                         ; decrement index y by one
        `=< 0x000089d1      d0f4           bne 0x4f9108                ; branch on result not zero
            0x000089d3      60             rts                         ; return from subroutine
            0x000089d4      00             brk                         ; force break

0x8025: (0x89d5):
            0x000089d5      a0c0           ldy #0xc0                   ; load index y with memory
       ..-> 0x000089d7      b95f8f         lda 0x8f5f,y                ; load accumulator with memory
       ||   0x000089da      990014         sta 0x1400,y                ; store accumulator in memory
       ||   0x000089dd      b91f90         lda 0x901f,y                ; load accumulator with memory
       ||   0x000089e0      99c014         sta 0x14c0,y                ; store accumulator in memory
       ||   0x000089e3      c018           cpy #0x18                   ; compare memory and index y
      ,===< 0x000089e5      9003           bcc 0x4f9108                ; branch on carry clear
      |||   0x000089e7      88             dey                         ; decrement index y by one
      |`==< 0x000089e8      d0ed           bne 0x4f9108                ; branch on result not zero
      `---> 0x000089ea      b9df90         lda 0x90df,y                ; load accumulator with memory
        |   0x000089ed      99d003         sta 0x03d0,y                ; store accumulator in memory
        |   0x000089f0      b9f890         lda 0x90f8,y                ; load accumulator with memory
        |   0x000089f3      99e803         sta 0x03e8,y                ; store accumulator in memory
        |   0x000089f6      88             dey                         ; decrement index y by one
        `=< 0x000089f7      10de           bpl 0x4f9108                ; branch on result plus
            0x000089f9      20bd8a         jsr 0x8abd                  ; jump to new location saving return address
            0x000089fc      20d38a         jsr 0x8ad3                  ; jump to new location saving return address
            0x000089ff      a218           ldx #0x18                   ; load index x with memory
            0x00008a01      8e18d0         stx 0xd018       ; vic II memory mode
            0x00008a04      a900           lda #0x00                   ; load accumulator with memory
            0x00008a06      8d20d0         sta 0xd020       ; border
            0x00008a09      8d21d0         sta 0xd021       ; background
            0x00008a0c      a93b           lda #0x3b                   ; load accumulator with memory
            0x00008a0e      8d11d0         sta 0xd011       ; screen control: 0b00111011
            0x00008a11      60             rts                         ; return from subroutine

(): load files
        .-> 0x00008a12      a200           ldx #0x00                   ; load index x with memory
        |   0x00008a14      20246c         jsr 0x6c24       ; load file from disk
        |   0x00008a17      48 54 58 54 00                  ; "HTXT"
        `=< 0x00008a1c      b0f4           bcs 0x4f9108     ; on error try again
        .-> 0x00008a1e      a200           ldx #0x00                   ; load index x with memory        
        |   0x00008a20      20246c         jsr 0x6c24       ; load file from disk
        |   0x00008a23      49 4e 54 52 4f 2e 56 49 45 57 00; "INTRO.VIEW"       
        `=< 0x00008a2e      b0ee           bcs 0x4f9108                ; branch on carry set
            0x00008a30      60             rts                         ; return from subroutine

local: load main.subs and call 4c2a
            0x00008a31      a200           ldx #0x00                   ; load index x with memory
            0x00008a33      20246c         jsr 0x6c24        ; load file
            0x00008a36      4d 41 49 4e 2e 53 55 42 53 00    ; "MAIN.SUBS"            
            0x00008a40      202a4c         jsr 0x4c2a                  ; jump to new location saving return address
            0x00008a43      a958           lda #0x58                   ; load accumulator with memory
            0x00008a45      8572           sta 0x72                    ; store accumulator in memory
            0x00008a47      60             rts                         ; return from subroutine

local:
            0x00008a48      48             pha                         ; push accumulator on stack
            0x00008a49      207a8a         jsr 0x8a7a                  ; jump to new location saving return address
            0x00008a4c      a950           lda #0x50                   ; load accumulator with memory
            0x00008a4e      20018b         jsr 0x8b01                  ; jump to new location saving return address
            0x00008a51      68             pla                         ; pull accumulator from stack
            0x00008a52      8d9505         sta 0x0595                  ; store accumulator in memory
            0x00008a55      8da605         sta 0x05a6                  ; store accumulator in memory
            0x00008a58      8d2906         sta 0x0629                  ; store accumulator in memory
            0x00008a5b      a21b           ldx #0x1b                   ; load index x with memory
        .-> 0x00008a5d      e00c           cpx #0x0c                   ; compare memory and index x
       ,==< 0x00008a5f      f015           beq 0x4f9108                ; branch on result zero
       ||   0x00008a61      e00d           cpx #0x0d                   ; compare memory and index x
      ,===< 0x00008a63      f011           beq 0x4f9108                ; branch on result zero
      |||   0x00008a65      e010           cpx #0x10                   ; compare memory and index x
     ,====< 0x00008a67      f00d           beq 0x4f9108                ; branch on result zero
     ||||   0x00008a69      e011           cpx #0x11                   ; compare memory and index x
    ,=====< 0x00008a6b      f009           beq 0x4f9108                ; branch on result zero
    |||||   0x00008a6d      9d9605         sta 0x0596,x                ; store accumulator in memory
    |||||   0x00008a70      9dbe05         sta 0x05be,x                ; store accumulator in memory
    |||||   0x00008a73      9de605         sta 0x05e6,x                ; store accumulator in memory
    ````--> 0x00008a76      ca             dex                         ; decrement index x by one
        `=< 0x00008a77      10e4           bpl 0x4f9108                ; branch on result plus
            0x00008a79      60             rts                         ; return from subroutine

local:
            0x00008a7a      a003           ldy #0x03        ; value can be changed
            0x00008a7c      b9968a         lda 0x8a96,y                ; load accumulator with memory
            0x00008a7f      aa             tax                         ; transfer accumulator to index x
            0x00008a80      b99a8a         lda 0x8a9a,y                ; load accumulator with memory
            0x00008a83      a039           ldy #0x39                   ; load index y with memory
            0x00008a85      38             sec                         ; set carry flag
            0x00008a86      200b8b         jsr 0x8b0b                  ; jump to new location saving return address
            0x00008a89      a950           lda #0x50                   ; load accumulator with memory
            0x00008a8b      ce7b8a         dec 0x8a7b                  ; decrement memory by one
        ,=< 0x00008a8e      1005           bpl 0x4f9108                ; branch on result plus
        |   0x00008a90      a903           lda #0x03                   ; load accumulator with memory
        |   0x00008a92      8d7b8a         sta 0x8a7b                  ; store accumulator in memory
        `-> 0x00008a95      60             rts                         ; return from subroutine
            0x00008a96      9161                            ; variable
            0x00008a98      3101           
            0x00008a9a      bf8f5f                          ; variable
            0x00008a9d      2f

local:            
            0x00008a9e      20968c         jsr 0x8c96                  ; jump to new location saving return address
            0x00008aa1      a003           ldy #0x03                   ; load index y with memory
            0x00008aa3      b9968a         lda 0x8a96,y                ; load accumulator with memory
            0x00008aa6      aa             tax                         ; transfer accumulator to index x
            0x00008aa7      b99a8a         lda 0x8a9a,y                ; load accumulator with memory
            0x00008aaa      a039           ldy #0x39                   ; load index y with memory
            0x00008aac      38             sec                         ; set carry flag
            0x00008aad      205c8b         jsr 0x8b5c                  ; jump to new location saving return address
            0x00008ab0      a950           lda #0x50                   ; load accumulator with memory
            0x00008ab2      cea28a         dec 0x8aa2                  ; decrement memory by one
        ,=< 0x00008ab5      1005           bpl 0x4a7108                ; branch on result plus
        |   0x00008ab7      a903           lda #0x03                   ; load accumulator with memory
        |   0x00008ab9      8da28a         sta 0x8aa2                  ; store accumulator in memory
        `-> 0x00008abc      60             rts                         ; return from subroutine

0x89f9: delete memory $2000-$3fff
            0x00008abd      a220           ldx #0x20                   ; load index x with memory
(): delete memory x - 3fff
            0x00008abf      86fd           stx 0xfd                    ; store index x in memory
            0x00008ac1      a220           ldx #0x20                   ; load index x with memory
            0x00008ac3      a900           lda #0x00                   ; load accumulator with memory
            0x00008ac5      85fc           sta 0xfc                    ; store accumulator in memory
            0x00008ac7      a8             tay                         ; transfer accumulator to index y
       ..-> 0x00008ac8      91fc           sta (0xfc),y                ; store accumulator in memory
       ||   0x00008aca      c8             iny                         ; increment index y by one
       `==< 0x00008acb      d0fb           bne 0x4f9108                ; branch on result not zero
        |   0x00008acd      e6fd           inc 0xfd                    ; increment memory by one
        |   0x00008acf      ca             dex                         ; decrement index x by one
        `=< 0x00008ad0      d0f6           bne 0x4f9108                ; branch on result not zero
            0x00008ad2      60             rts                         ; return from subroutine

0x89fc: fill screen with something
            0x00008ad3      a200           ldx #0x00                   ; load index x with memory
            0x00008ad5      a910           lda #0x10                   ; load accumulator with memory
        .-> 0x00008ad7      9d0004         sta 0x0400,x                ; store accumulator in memory
        |   0x00008ada      9d0005         sta 0x0500,x                ; store accumulator in memory
        |   0x00008add      9d0006         sta 0x0600,x                ; store accumulator in memory
        |   0x00008ae0      9d0007         sta 0x0700,x                ; store accumulator in memory
        |   0x00008ae3      ca             dex                         ; decrement index x by one
        `=< 0x00008ae4      d0f1           bne 0x4f9108                ; branch on result not zero
            0x00008ae6      8a             txa                         ; transfer index x to accumulator
            0x00008ae7      a227           ldx #0x27                   ; load index x with memory
        .-> 0x00008ae9      9d0004         sta 0x0400,x                ; store accumulator in memory
        |   0x00008aec      ca             dex                         ; decrement index x by one
        `=< 0x00008aed      10fa           bpl 0x4f9108                ; branch on result plus
            0x00008aef      60             rts                         ; return from subroutine

(): wait some time ?
            0x00008af0      853b           sta 0x3b                    ; store accumulator in memory
        .-> 0x00008af2      a0ff           ldy #0xff                   ; load index y with memory
       .--> 0x00008af4      a200           ldx #0x00                   ; load index x with memory
      .---> 0x00008af6      ca             dex                         ; decrement index x by one
      `===< 0x00008af7      d0fd           bne 0x4f9108                ; branch on result not zero
       ||   0x00008af9      88             dey                         ; decrement index y by one
       `==< 0x00008afa      d0f8           bne 0x4f9108                ; branch on result not zero
        |   0x00008afc      c63b           dec 0x3b                    ; decrement memory by one
        `=< 0x00008afe      d0f2           bne 0x4f9108                ; branch on result not zero
            0x00008b00      60             rts                         ; return from subroutine

local:
            0x00008b01      a8             tay                         ; transfer accumulator to index y
        .-> 0x00008b02      a200           ldx #0x00                   ; load index x with memory
       .--> 0x00008b04      ca             dex                         ; decrement index x by one
       `==< 0x00008b05      d0fd           bne 0x4f9108                ; branch on result not zero
        |   0x00008b07      88             dey                         ; decrement index y by one
        `=< 0x00008b08      d0f8           bne 0x4f9108                ; branch on result not zero
            0x00008b0a      60             rts                         ; return from subroutine

0x8086: ?
            0x00008b0b      853a           sta 0x3a                    ; store accumulator in memory
            0x00008b0d      8638           stx 0x38                    ; store index x in memory
            0x00008b0f      8439           sty 0x39                    ; store index y in memory
        ,=< 0x00008b11      9004           bcc 0x4f9108                ; branch on carry clear
        |   0x00008b13      a9a0           lda #0xa0                   ; load accumulator with memory
       ,==< 0x00008b15      d002           bne 0x4f9108                ; branch on result not zero
       |`-> 0x00008b17      a940           lda #0x40                   ; load accumulator with memory
       `--> 0x00008b19      8d298b         sta 0x8b29                  ; store accumulator in memory
        .-> 0x00008b1c      a438           ldy 0x38                    ; load index y with memory
        |   0x00008b1e      b90014         lda 0x1400,y                ; load accumulator with memory
        |   0x00008b21      85fe           sta 0xfe                    ; store accumulator in memory
        |   0x00008b23      b9c014         lda 0x14c0,y                ; load accumulator with memory
        |   0x00008b26      291f           and #0x1f                   ; "and" memory with accumulator
        |   0x00008b28      0940           ora #0x40                   ; "or" memory with accumulator
        |   0x00008b2a      85ff           sta 0xff         ; value can be modified
        |   0x00008b2c      a439           ldy 0x39                    ; load index y with memory
        |   0x00008b2e      b90014         lda 0x1400,y                ; load accumulator with memory
        |   0x00008b31      8534           sta 0x34                    ; store accumulator in memory
        |   0x00008b33      b9c014         lda 0x14c0,y                ; load accumulator with memory
        |   0x00008b36      8535           sta 0x35                    ; store accumulator in memory
        |   0x00008b38      a227           ldx #0x27                   ; load index x with memory
        |   0x00008b3a      a000           ldy #0x00                   ; load index y with memory
       .--> 0x00008b3c      b1fe           lda (0xfe),y                ; load accumulator with memory
       ||   0x00008b3e      9134           sta (0x34),y                ; store accumulator in memory
       ||   0x00008b40      98             tya                         ; transfer index y to accumulator
       ||   0x00008b41      18             clc                         ; clear carry flag
       ||   0x00008b42      6908           adc #0x08                   ; add memory to accumulator with carry
       ||   0x00008b44      a8             tay                         ; transfer accumulator to index y
      ,===< 0x00008b45      9004           bcc 0x4f9108                ; branch on carry clear
      |||   0x00008b47      e6ff           inc 0xff                    ; increment memory by one
      |||   0x00008b49      e635           inc 0x35                    ; increment memory by one
      `---> 0x00008b4b      ca             dex                         ; decrement index x by one
       `==< 0x00008b4c      10ee           bpl 0x4f9108                ; branch on result plus
        |   0x00008b4e      a438           ldy 0x38                    ; load index y with memory
        |   0x00008b50      c43a           cpy 0x3a                    ; compare memory and index y
       ,==< 0x00008b52      f007           beq 0x4f9108                ; branch on result zero
       ||   0x00008b54      e638           inc 0x38                    ; increment memory by one
       ||   0x00008b56      e639           inc 0x39                    ; increment memory by one
       |`=< 0x00008b58      4c1c8b         jmp 0x8b1c                  ; jump to new location
       `--> 0x00008b5b      60             rts                         ; return from subroutine

local: partial reveal of flames
            0x00008b5c      853a           sta 0x3a                    ; store accumulator in memory
            0x00008b5e      8638           stx 0x38                    ; store index x in memory
            0x00008b60      8439           sty 0x39                    ; store index y in memory
            0x00008b62      a900           lda #0x00                   ; load accumulator with memory
            0x00008b64      8dca8b         sta 0x8bca                  ; store accumulator in memory
        ,=< 0x00008b67      9004           bcc 0x4f9108                ; branch on carry clear
        |   0x00008b69      a9a0           lda #0xa0                   ; load accumulator with memory
       ,==< 0x00008b6b      d002           bne 0x4f9108                ; branch on result not zero
       |`-> 0x00008b6d      a940           lda #0x40                   ; load accumulator with memory
       `--> 0x00008b6f      8d7f8b         sta 0x8b7f                  ; store accumulator in memory
        .-> 0x00008b72      a438           ldy 0x38                    ; load index y with memory
        |   0x00008b74      b90014         lda 0x1400,y                ; load accumulator with memory
        |   0x00008b77      85fe           sta 0xfe                    ; store accumulator in memory
        |   0x00008b79      b9c014         lda 0x14c0,y                ; load accumulator with memory
        |   0x00008b7c      291f           and #0x1f                   ; "and" memory with accumulator
        |   0x00008b7e      0940           ora #0x40        ; value can be changed
        |   0x00008b80      85ff           sta 0xff                    ; store accumulator in memory
        |   0x00008b82      a439           ldy 0x39                    ; load index y with memory
        |   0x00008b84      b90014         lda 0x1400,y                ; load accumulator with memory
        |   0x00008b87      8534           sta 0x34                    ; store accumulator in memory
        |   0x00008b89      b9c014         lda 0x14c0,y                ; load accumulator with memory
        |   0x00008b8c      8535           sta 0x35                    ; store accumulator in memory
        |   0x00008b8e      acca8b         ldy 0x8bca                  ; load index y with memory
        |   0x00008b91      b90014         lda 0x1400,y                ; load accumulator with memory
        |   0x00008b94      8588           sta 0x88                    ; store accumulator in memory
        |   0x00008b96      b9c014         lda 0x14c0,y                ; load accumulator with memory
        |   0x00008b99      291f           and #0x1f                   ; "and" memory with accumulator
        |   0x00008b9b      0940           ora #0x40                   ; "or" memory with accumulator
        |   0x00008b9d      8589           sta 0x89                    ; store accumulator in memory
        |   0x00008b9f      a227           ldx #0x27                   ; load index x with memory
        |   0x00008ba1      a000           ldy #0x00                   ; load index y with memory
       .--> 0x00008ba3      b1fe           lda (0xfe),y                ; load accumulator with memory
       ||   0x00008ba5      3188           and (0x88),y                ; "and" memory with accumulator
       ||   0x00008ba7      9134           sta (0x34),y                ; store accumulator in memory
       ||   0x00008ba9      98             tya                         ; transfer index y to accumulator
       ||   0x00008baa      18             clc                         ; clear carry flag
       ||   0x00008bab      6908           adc #0x08                   ; add memory to accumulator with carry
       ||   0x00008bad      a8             tay                         ; transfer accumulator to index y
      ,===< 0x00008bae      9006           bcc 0x4f9108                ; branch on carry clear
      |||   0x00008bb0      e6ff           inc 0xff                    ; increment memory by one
      |||   0x00008bb2      e635           inc 0x35                    ; increment memory by one
      |||   0x00008bb4      e689           inc 0x89                    ; increment memory by one
      `---> 0x00008bb6      ca             dex                         ; decrement index x by one
       `==< 0x00008bb7      10ea           bpl 0x4f9108                ; branch on result plus
        |   0x00008bb9      a438           ldy 0x38                    ; load index y with memory
        |   0x00008bbb      c43a           cpy 0x3a                    ; compare memory and index y
       ,==< 0x00008bbd      f00a           beq 0x4f9108                ; branch on result zero
       ||   0x00008bbf      e638           inc 0x38                    ; increment memory by one
       ||   0x00008bc1      e639           inc 0x39                    ; increment memory by one
       ||   0x00008bc3      eeca8b         inc 0x8bca                  ; increment memory by one
       |`=< 0x00008bc6      4c728b         jmp 0x8b72                  ; jump to new location
       `--> 0x00008bc9      60             rts                         ; return from subroutine
            0x00008bca      00             brk              ; variable

local:
            0x00008bcb      a278           ldx #0x78                   ; load index x with memory
        .-> 0x00008bcd      bd0014         lda 0x1400,x                ; load accumulator with memory
        |   0x00008bd0      85fe           sta 0xfe                    ; store accumulator in memory
        |   0x00008bd2      bdc014         lda 0x14c0,x                ; load accumulator with memory
        |   0x00008bd5      85ff           sta 0xff                    ; store accumulator in memory
        |   0x00008bd7      a0ff           ldy #0xff                   ; load index y with memory
       .--> 0x00008bd9      a900           lda #0x00                   ; load accumulator with memory
       ||   0x00008bdb      91fe           sta (0xfe),y                ; store accumulator in memory
       ||   0x00008bdd      88             dey                         ; decrement index y by one
       ||   0x00008bde      c008           cpy #0x08                   ; compare memory and index y
       `==< 0x00008be0      b0f7           bcs 0x4f9108                ; branch on carry set
        |   0x00008be2      e6ff           inc 0xff                    ; increment memory by one
        |   0x00008be4      a037           ldy #0x37                   ; load index y with memory
       .--> 0x00008be6      91fe           sta (0xfe),y                ; store accumulator in memory
       ||   0x00008be8      88             dey                         ; decrement index y by one
       `==< 0x00008be9      d0fb           bne 0x4f9108                ; branch on result not zero
        |   0x00008beb      91fe           sta (0xfe),y                ; store accumulator in memory
        |   0x00008bed      8a             txa                         ; transfer index x to accumulator
        |   0x00008bee      18             clc                         ; clear carry flag
        |   0x00008bef      6908           adc #0x08                   ; add memory to accumulator with carry
        |   0x00008bf1      aa             tax                         ; transfer accumulator to index x
        |   0x00008bf2      e0b8           cpx #0xb8                   ; compare memory and index x
        `=< 0x00008bf4      d0d7           bne 0x4f9108                ; branch on result not zero
            0x00008bf6      a026           ldy #0x26                   ; load index y with memory
            0x00008bf8      a910           lda #0x10                   ; load accumulator with memory
        .-> 0x00008bfa      998006         sta 0x0680,y                ; store accumulator in memory
        |   0x00008bfd      99a806         sta 0x06a8,y                ; store accumulator in memory
        |   0x00008c00      99d006         sta 0x06d0,y                ; store accumulator in memory
        |   0x00008c03      99f806         sta 0x06f8,y                ; store accumulator in memory
        |   0x00008c06      992007         sta 0x0720,y                ; store accumulator in memory
        |   0x00008c09      994807         sta 0x0748,y                ; store accumulator in memory
        |   0x00008c0c      997007         sta 0x0770,y                ; store accumulator in memory
        |   0x00008c0f      999807         sta 0x0798,y                ; store accumulator in memory
        |   0x00008c12      88             dey                         ; decrement index y by one
        `=< 0x00008c13      d0e5           bne 0x4f9108                ; branch on result not zero
            0x00008c15      60             rts                         ; return from subroutine
            0x00008c16      00             brk              ; variable
            0x00008c17      00             brk              ; variable

local: logo appear
        .-> 0x00008c18      ad1f8d         lda 0x8d1f                  ; load accumulator with memory
        |   0x00008c1b      293f           and #0x3f                   ; "and" memory with accumulator
        |   0x00008c1d      c960           cmp #0x60                   ; compare memory and accumulator
       ,==< 0x00008c1f      b046           bcs 0x4f9108                ; branch on carry set
       ||   0x00008c21      a8             tay                         ; transfer accumulator to index y
       ||   0x00008c22      b90014         lda 0x1400,y                ; load accumulator with memory
       ||   0x00008c25      85fe           sta 0xfe                    ; store accumulator in memory
       ||   0x00008c27      8534           sta 0x34                    ; store accumulator in memory
       ||   0x00008c29      b9c014         lda 0x14c0,y                ; load accumulator with memory
       ||   0x00008c2c      85ff           sta 0xff                    ; store accumulator in memory
       ||   0x00008c2e      18             clc                         ; clear carry flag
       ||   0x00008c2f      6920           adc #0x20                   ; add memory to accumulator with carry
       ||   0x00008c31      8535           sta 0x35                    ; store accumulator in memory
       ||   0x00008c33      ad1f8d         lda 0x8d1f                  ; load accumulator with memory
       ||   0x00008c36      29c0           and #0xc0                   ; "and" memory with accumulator
       ||   0x00008c38      0a             asl a                       ; shift left one bit (memory or accumulator)
       ||   0x00008c39      2a             rol a                       ; rotate one bit left (memory or accumulator)
       ||   0x00008c3a      2a             rol a                       ; rotate one bit left (memory or accumulator)
       ||   0x00008c3b      853b           sta 0x3b                    ; store accumulator in memory
       ||   0x00008c3d      ad208d         lda 0x8d20                  ; load accumulator with memory
       ||   0x00008c40      290f           and #0x0f                   ; "and" memory with accumulator
       ||   0x00008c42      0a             asl a                       ; shift left one bit (memory or accumulator)
       ||   0x00008c43      0a             asl a                       ; shift left one bit (memory or accumulator)
       ||   0x00008c44      053b           ora 0x3b                    ; "or" memory with accumulator
       ||   0x00008c46      c928           cmp #0x28                   ; compare memory and accumulator
      ,===< 0x00008c48      b01d           bcs 0x4f9108                ; branch on carry set
      |||   0x00008c4a      0a             asl a                       ; shift left one bit (memory or accumulator)
      |||   0x00008c4b      0a             asl a                       ; shift left one bit (memory or accumulator)
      |||   0x00008c4c      0a             asl a                       ; shift left one bit (memory or accumulator)
      |||   0x00008c4d      a8             tay                         ; transfer accumulator to index y
     ,====< 0x00008c4e      9004           bcc 0x4f9108                ; branch on carry clear
     ||||   0x00008c50      e6ff           inc 0xff                    ; increment memory by one
     ||||   0x00008c52      e635           inc 0x35                    ; increment memory by one
     `----> 0x00008c54      ad208d         lda 0x8d20                  ; load accumulator with memory
      |||   0x00008c57      2970           and #0x70                   ; "and" memory with accumulator
      |||   0x00008c59      4a             lsr a                       ; shift right one bit (memory or accumulator)
      |||   0x00008c5a      4a             lsr a                       ; shift right one bit (memory or accumulator)
      |||   0x00008c5b      4a             lsr a                       ; shift right one bit (memory or accumulator)
      |||   0x00008c5c      4a             lsr a                       ; shift right one bit (memory or accumulator)
      |||   0x00008c5d      aa             tax                         ; transfer accumulator to index x
      |||   0x00008c5e      bd8a8c         lda 0x8c8a,x                ; load accumulator with memory
      |||   0x00008c61      3134           and (0x34),y                ; "and" memory with accumulator
      |||   0x00008c63      11fe           ora (0xfe),y                ; "or" memory with accumulator
      |||   0x00008c65      91fe           sta (0xfe),y                ; store accumulator in memory
      ``--> 0x00008c67      200d8d         jsr 0x8d0d                  ; jump to new location saving return address
        |   0x00008c6a      20018e         jsr 0x8e01                  ; jump to new location saving return address
       ,==< 0x00008c6d      d00e           bne 0x4f9108                ; branch on result not zero
       ||   0x00008c6f      ce888c         dec 0x8c88                  ; decrement memory by one
      ,===< 0x00008c72      d005           bne 0x4f9108                ; branch on result not zero
      |||   0x00008c74      ce898c         dec 0x8c89                  ; decrement memory by one
     ,====< 0x00008c77      f003           beq 0x4f9108                ; branch on result zero
     |`-`=< 0x00008c79      4c188c         jmp 0x8c18                  ; jump to new location
     `----> 0x00008c7c      60             rts                         ; return from subroutine
       `--> 0x00008c7d      a200           ldx #0x00                   ; load index x with memory
            0x00008c7f      a93f           lda #0x3f                   ; load accumulator with memory
            0x00008c81      a000           ldy #0x00                   ; load index y with memory
            0x00008c83      18             clc                         ; clear carry flag
            0x00008c84      200b8b         jsr 0x8b0b                  ; jump to new location saving return address
            0x00008c87      60             rts                         ; return from subroutine
            0x00008c88      00             brk              ; variables ?
            0x00008c89      8001           nop #0x01                   ; no operation
            0x00008c8b      02             hlt
            0x00008c8c      0408           nop 0x08                    ; no operation
        ,=< 0x00008c8e      1020           bpl 0x4f9108                ; branch on result plus
        |   0x00008c90      40             rti                         ; return from interrupt
        |   0x00008c91      8040           nop #0x40                   ; no operation
        |   0x00008c93      40             rti                         ; return from interrupt
        |   0x00008c94      f8             sed                         ; set decimal mode
        |   0x00008c95      ff 

local:
            0x00008c96      a9c0           lda #0xc0                   ; load accumulator with memory
            0x00008c98      8d038d         sta 0x8d03                  ; store accumulator in memory
            0x00008c9b      ad338d         lda 0x8d33                  ; load accumulator with memory
            0x00008c9e      2907           and #0x07                   ; "and" memory with accumulator
            0x00008ca0      8d0c8d         sta 0x8d0c                  ; store accumulator in memory
        .-> 0x00008ca3      ac0c8d         ldy 0x8d0c                  ; load index y with memory
        |   0x00008ca6      b90014         lda 0x1400,y                ; load accumulator with memory
        |   0x00008ca9      85fe           sta 0xfe                    ; store accumulator in memory
        |   0x00008cab      b9c014         lda 0x14c0,y                ; load accumulator with memory
        |   0x00008cae      291f           and #0x1f                   ; "and" memory with accumulator
        |   0x00008cb0      0940           ora #0x40                   ; "or" memory with accumulator
        |   0x00008cb2      85ff           sta 0xff                    ; store accumulator in memory
        |   0x00008cb4      ad338d         lda 0x8d33                  ; load accumulator with memory
        |   0x00008cb7      29f8           and #0xf8                   ; "and" memory with accumulator
        |   0x00008cb9      4a             lsr a                       ; shift right one bit (memory or accumulator)
        |   0x00008cba      853b           sta 0x3b                    ; store accumulator in memory
        |   0x00008cbc      ad348d         lda 0x8d34                  ; load accumulator with memory
        |   0x00008cbf      2901           and #0x01                   ; "and" memory with accumulator
        |   0x00008cc1      18             clc                         ; clear carry flag
        |   0x00008cc2      6a             ror a                       ; rotate one bit right (memory or accumulator)
        |   0x00008cc3      6a             ror a                       ; rotate one bit right (memory or accumulator)
        |   0x00008cc4      053b           ora 0x3b                    ; "or" memory with accumulator
        |   0x00008cc6      4a             lsr a                       ; shift right one bit (memory or accumulator)
        |   0x00008cc7      4a             lsr a                       ; shift right one bit (memory or accumulator)
        |   0x00008cc8      c928           cmp #0x28                   ; compare memory and accumulator
       ,==< 0x00008cca      b016           bcs 0x4a7108                ; branch on carry set
       ||   0x00008ccc      0a             asl a                       ; shift left one bit (memory or accumulator)
      |||   0x00008ccd      0a             asl a                       ; shift left one bit (memory or accumulator)
      |||   0x00008cce      0a             asl a                       ; shift left one bit (memory or accumulator)
     ,====< 0x00008ccf      9002           bcc 0x4f9108                ; branch on carry clear
     ||||   0x00008cd1      e6ff           inc 0xff                    ; increment memory by one
     `----> 0x00008cd3      a8             tay                         ; transfer accumulator to index y
      |||   0x00008cd4      ad348d         lda 0x8d34                  ; load accumulator with memory
      |||   0x00008cd7      290e           and #0x0e                   ; "and" memory with accumulator
      |||   0x00008cd9      4a             lsr a                       ; shift right one bit (memory or accumulator)
      |||   0x00008cda      aa             tax                         ; transfer accumulator to index x
      |||   0x00008cdb      bd048d         lda 0x8d04,x                ; load accumulator with memory
      |||   0x00008cde      11fe           ora (0xfe),y                ; "or" memory with accumulator
      |||   0x00008ce0      91fe           sta (0xfe),y                ; store accumulator in memory
      ||`-> 0x00008ce2      ad0c8d         lda 0x8d0c                  ; load accumulator with memory
      ||    0x00008ce5      18             clc                         ; clear carry flag
      ||    0x00008ce6      6908           adc #0x08                   ; add memory to accumulator with carry
      ||    0x00008ce8      c92f           cmp #0x2f                   ; compare memory and accumulator
      ||,=< 0x00008cea      b006           bcs 0x4f9108                ; branch on carry set
      |||   0x00008cec      8d0c8d         sta 0x8d0c                  ; store accumulator in memory
      `===< 0x00008cef      4ca38c         jmp 0x8ca3                  ; jump to new location
       |`-> 0x00008cf2      20218d         jsr 0x8d21                  ; jump to new location saving return address
       |    0x00008cf5      20018e         jsr 0x8e01       ; check key
       |,=< 0x00008cf8      d008           bne 0x4f9108                ; branch on result not zero
       ||   0x00008cfa      ce038d         dec 0x8d03                  ; decrement memory by one
      ,===< 0x00008cfd      f003           beq 0x4f9108                ; branch on result zero
      |`==< 0x00008cff      4c9b8c         jmp 0x8c9b                  ; jump to new location
      `-`-> 0x00008d02      60             rts                         ; return from subroutine
            0x00008d03      00             brk                         ; force break
            0x00008d04      0102           ora (0x02,x)                ; "or" memory with accumulator
            0x00008d06      0408           nop 0x08                    ; no operation
        ,=< 0x00008d08      1020           bpl 0x4f9108                ; branch on result plus
        |   0x00008d0a      40             rti                         ; return from interrupt
        |   0x00008d0b      80             
        |   0x00008d0c      00                              ; variable

local:
        |   0x00008d0d      18             clc                         ; clear carry flag
        |   0x00008d0e      6e208d         ror 0x8d20                  ; rotate one bit right (memory or accumulator)
       ||   0x00008d11      6e1f8d         ror 0x8d1f                  ; rotate one bit right (memory or accumulator)
      ,===< 0x00008d14      9008           bcc 0x4f9108                ; branch on carry clear
      |||   0x00008d16      ad208d         lda 0x8d20                  ; load accumulator with memory
      |||   0x00008d19      4960           eor #0x60                   ; "exclusive-or" memory with accumulator
      |||   0x00008d1b      8d208d         sta 0x8d20                  ; store accumulator in memory
      `---> 0x00008d1e      60             rts                         ; return from subroutine
       ||   0x00008d1f      00             brk              ; variable
       ||   0x00008d20      01                              ; variable

        |   0x00008d21      18             clc                         ; clear carry flag
        |   0x00008d22      6e348d         ror 0x8d34                  ; rotate one bit right (memory or accumulator)
        |   0x00008d25      6e338d         ror 0x8d33                  ; rotate one bit right (memory or accumulator)
       ,==< 0x00008d28      9008           bcc 0x4a7108                ; branch on carry clear
       ||   0x00008d2a      ad348d         lda 0x8d34                  ; load accumulator with memory
       ||   0x00008d2d      49ca           eor #0xca                   ; "exclusive-or" memory with accumulator
       ||   0x00008d2f      8d348d         sta 0x8d34                  ; store accumulator in memory
       `--> 0x00008d32      60             rts                         ; return from subroutine
            0x00008d33      01
            0x00008d34      00                              ; variable

local:
       |.-> 0x00008d35      a57b           lda 0x7b                    ; load accumulator with memory
       ||   0x00008d37      18             clc                         ; clear carry flag
       ||   0x00008d38      6910           adc #0x10                   ; add memory to accumulator with carry
       ||   0x00008d3a      0a             asl a                       ; shift left one bit (memory or accumulator)
       ||   0x00008d3b      0a             asl a                       ; shift left one bit (memory or accumulator)
       ||   0x00008d3c      0a             asl a                       ; shift left one bit (memory or accumulator)
       ||   0x00008d3d      a8             tay                         ; transfer accumulator to index y
       ||   0x00008d3e      b90014         lda 0x1400,y                ; load accumulator with memory
       ||   0x00008d41      85fe           sta 0xfe                    ; store accumulator in memory
       ||   0x00008d43      b9c014         lda 0x14c0,y                ; load accumulator with memory
       ||   0x00008d46      85ff           sta 0xff                    ; store accumulator in memory
       ||   0x00008d48      a47b           ldy 0x7b                    ; load index y with memory
       ||   0x00008d4a      b9648d         lda 0x8d64,y                ; load accumulator with memory
       ||   0x00008d4d      18             clc                         ; clear carry flag
       ||   0x00008d4e      65fe           adc 0xfe                    ; add memory to accumulator with carry
       ||   0x00008d50      85fe           sta 0xfe                    ; store accumulator in memory
      ,===< 0x00008d52      9002           bcc 0x4f9108                ; branch on carry clear
      |||   0x00008d54      e6ff           inc 0xff                    ; increment memory by one
      `---> 0x00008d56      b96a8d         lda 0x8d6a,y                ; load accumulator with memory
       ||   0x00008d59      a8             tay                         ; transfer accumulator to index y
      .---> 0x00008d5a      b1fe           lda (0xfe),y                ; load accumulator with memory
      |||   0x00008d5c      49ff           eor #0xff                   ; "exclusive-or" memory with accumulator
      |||   0x00008d5e      91fe           sta (0xfe),y                ; store accumulator in memory
      |||   0x00008d60      88             dey                         ; decrement index y by one
      `===< 0x00008d61      d0f7           bne 0x4f9108                ; branch on result not zero
       ||   0x00008d63      60             rts                         ; return from subroutine
       ||   0x00008d64      5f473f                          ; variable
       ||   0x00008d67      4757                   
       ||   0x00008d69      4f80b0                   
       |    0x00008d6c      c8             
       |    0x00008d6d      b8             
       `==< 0x00008d6e      90a0           

local: draw intro border
            0x00008d70      a900           lda #0x00                   ; load accumulator with memory
            0x00008d72      85c9           sta 0xc9                    ; store accumulator in memory
            0x00008d74      a910           lda #0x10                   ; load accumulator with memory
            0x00008d76      85ca           sta 0xca                    ; store accumulator in memory
            0x00008d78      a027           ldy #0x27                   ; load index y with memory
        .-> 0x00008d7a      84c9           sty 0xc9                    ; store index y in memory
        |   0x00008d7c      a90e           lda #0x0e                   ; load accumulator with memory
        |   0x00008d7e      85ca           sta 0xca                    ; store accumulator in memory
        |   0x00008d80      b9b18d         lda 0x8db1,y                ; load accumulator with memory
        |   0x00008d83      20034c         jsr 0x4c03       ; set memory banking: set kernal and io visible
        |   0x00008d86      a917           lda #0x17                   ; load accumulator with memory
        |   0x00008d88      85ca           sta 0xca                    ; store accumulator in memory
        |   0x00008d8a      84c9           sty 0xc9                    ; store index y in memory
        |   0x00008d8c      b9d98d         lda 0x8dd9,y                ; load accumulator with memory
        |   0x00008d8f      20034c         jsr 0x4c03                  ; jump to new location saving return address
        |   0x00008d92      88             dey                         ; decrement index y by one
        `=< 0x00008d93      10e5           bpl 0x4f9108                ; branch on result plus
            0x00008d95      a016           ldy #0x16                   ; load index y with memory
        .-> 0x00008d97      84ca           sty 0xca                    ; store index y in memory
        |   0x00008d99      a900           lda #0x00                   ; load accumulator with memory
        |   0x00008d9b      85c9           sta 0xc9                    ; store accumulator in memory
        |   0x00008d9d      a90a           lda #0x0a                   ; load accumulator with memory
        |   0x00008d9f      20034c         jsr 0x4c03                  ; jump to new location saving return address
        |   0x00008da2      a927           lda #0x27                   ; load accumulator with memory
        |   0x00008da4      85c9           sta 0xc9                    ; store accumulator in memory
        |   0x00008da6      a908           lda #0x08                   ; load accumulator with memory
        |   0x00008da8      20034c         jsr 0x4c03                  ; jump to new location saving return address
        |   0x00008dab      88             dey                         ; decrement index y by one
        |   0x00008dac      c00e           cpy #0x0e                   ; compare memory and index y
        `=< 0x00008dae      d0e7           bne 0x4f9108                ; branch on result not zero
            0x00008db0      60             rts                         ; return from subroutine
        ,=< 0x00008db1      1004           bpl 0x4f9108     ; variable
        |   0x00008db3      0404           nop 0x04                    ; no operation
        |   0x00008db5      0404           nop 0x04                    ; no operation
        `-> 0x00008db7      0404           nop 0x04                    ; no operation
            0x00008db9      0404           nop 0x04                    ; no operation
            0x00008dbb      0404           nop 0x04                    ; no operation
            0x00008dbd      0404           nop 0x04                    ; no operation
            0x00008dbf      0404           nop 0x04                    ; no operation
            0x00008dc1      0404           nop 0x04                    ; no operation
            0x00008dc3      0404           nop 0x04                    ; no operation
            0x00008dc5      0404           nop 0x04                    ; no operation
            0x00008dc7      0404           nop 0x04                    ; no operation
            0x00008dc9      0404           nop 0x04                    ; no operation
            0x00008dcb      0404           nop 0x04                    ; no operation
            0x00008dcd      0404           nop 0x04                    ; no operation
            0x00008dcf      0404           nop 0x04                    ; no operation
            0x00008dd1      0404           nop 0x04                    ; no operation
            0x00008dd3      0404           nop 0x04                    ; no operation
            0x00008dd5      0404           nop 0x04                    ; no operation
            0x00008dd7      0412           nop 0x12                    ; no operation
            0x00008dd9      1402           nop 0x02,x                  ; no operation
            0x00008ddb      02             hlt
        .-> 0x00008ddc      02             hlt
        |   0x00008ddd      02             hlt
        |   0x00008dde      1ec3ef         asl 0xefc3,x                ; shift left one bit (memory or accumulator)
        `=< 0x00008de1      f0f9           beq 0x4f9108                ; branch on result zero
            0x00008de3      f2             hlt
            0x00008de4      e9e7           sbc #0xe7                   ; subtract memory from accumulator with borrow
            0x00008de6      e8             inx                         ; increment index x by one
            0x00008de7      f4a0           nop 0xa0,x                  ; no operation
            0x00008de9      b1b9           lda (0xb9),y                ; load accumulator with memory
            0x00008deb      b8             clv                         ; clear overflow flag
            0x00008dec      b8             clv                         ; clear overflow flag
            0x00008ded      a0cc           ldy #0xcc                   ; load index y with memory
            0x00008def      eff2e4         isb 0xe4f2
            0x00008df2      a0c2           ldy #0xc2                   ; load index y with memory
            0x00008df4      f2             hlt
            0x00008df5      e9f4           sbc #0xf4                   ; subtract memory from accumulator with borrow
            0x00008df7      e9f3           sbc #0xf3                   ; subtract memory from accumulator with borrow
            0x00008df9      e8             inx                         ; increment index x by one
            0x00008dfa      1c0202         nop 0x0202,x                ; no operation
            0x00008dfd      02             hlt
            0x00008dfe      02             hlt
            0x00008dff      02             hlt
            0x00008e00      16  

(): check for keypress?
            0x00008e01      20e4ff         jsr 0xffe4       ; GETIN. Read byte from default input. (If not keyboard, must call OPEN and CHKIN beforehands.)
            0x00008e04      c920           cmp #0x20                   ; compare memory and accumulator
        ,=< 0x00008e06      f004           beq 0x4a7108                ; branch on result zero
        |   0x00008e08      ad128e         lda 0x8e12                  ; load accumulator with memory
        |   0x00008e0b      60             rts                         ; return from subroutine
        `-> 0x00008e0c      a901           lda #0x01                   ; load accumulator with memory
            0x00008e0e      8d128e         sta 0x8e12                  ; store accumulator in memory
            0x00008e11      60             rts                         ; return from subroutine

            0x00008e12      00             brk                         ; force break
            0x00008e13      a920           lda #0x20                   ; load accumulator with memory
            0x00008e15      85ea           sta 0xea                    ; store accumulator in memory
            0x00008e17      a900           lda #0x00                   ; load accumulator with memory
            0x00008e19      8d578f         sta 0x8f57                  ; store accumulator in memory
        .-> 0x00008e1c      ae578f         ldx 0x8f57                  ; load index x with memory
        |   0x00008e1f      bd4e8e         lda 0x8e4e,x                ; load accumulator with memory
        |   0x00008e22      8509           sta 0x09                    ; store accumulator in memory
        |   0x00008e24      bd4a8e         lda 0x8e4a,x                ; load accumulator with memory
        |   0x00008e27      18             clc                         ; clear carry flag
        |   0x00008e28      6910           adc #0x10                   ; add memory to accumulator with carry
        |   0x00008e2a      8508           sta 0x08                    ; store accumulator in memory
       ,==< 0x00008e2c      9002           bcc 0x4f9108                ; branch on carry clear
       ||   0x00008e2e      e609           inc 0x09                    ; increment memory by one
       `--> 0x00008e30      bd528e         lda 0x8e52,x                ; load accumulator with memory
        |   0x00008e33      850a           sta 0x0a                    ; store accumulator in memory
        |   0x00008e35      20568e         jsr 0x8e56                  ; jump to new location saving return address
       ,==< 0x00008e38      9003           bcc 0x4f9108                ; branch on carry clear
      ,===< 0x00008e3a      4c498e         jmp 0x8e49                  ; jump to new location
      |`--> 0x00008e3d      ee578f         inc 0x8f57                  ; increment memory by one
      | |   0x00008e40      ad578f         lda 0x8f57                  ; load accumulator with memory
      | |   0x00008e43      c904           cmp #0x04                   ; compare memory and accumulator
      | `=< 0x00008e45      90d5           bcc 0x4f9108                ; branch on carry clear
      |     0x00008e47      18             clc                         ; clear carry flag
      |     0x00008e48      60             rts                         ; return from subroutine
      `---> 0x00008e49      60             rts                         ; return from subroutine
            0x00008e4a      1c307f         nop 0x7f30,x                ; no operation
        |   0x00008e4d      9700           sax 0x00,y
        |   0x00008e4f      00             brk                         ; force break
        |   0x00008e50      00             brk                         ; force break
        |   0x00008e51      00             brk                         ; force break
        |   0x00008e52      40             rti                         ; return from interrupt
        |   0x00008e53      5a             nop                         ; no operation
        |   0x00008e54      4a             lsr a                       ; shift right one bit (memory or accumulator)
        |   0x00008e55      65a9           adc 0xa9                    ; add memory to accumulator with carry
        |   0x00008e57      00             brk                         ; force break
        |   0x00008e58      8d5b8f         sta 0x8f5b                  ; store accumulator in memory
        |   0x00008e5b      a003           ldy #0x03                   ; load index y with memory
        |   0x00008e5d      b9518f         lda 0x8f51,y                ; load accumulator with memory
        |   0x00008e60      8d588f         sta 0x8f58                  ; store accumulator in memory
        |   0x00008e63      b9528f         lda 0x8f52,y                ; load accumulator with memory
        |   0x00008e66      8d598f         sta 0x8f59                  ; store accumulator in memory
        |   0x00008e69      b9538f         lda 0x8f53,y                ; load accumulator with memory
        |   0x00008e6c      8d5a8f         sta 0x8f5a                  ; store accumulator in memory
        |   0x00008e6f      ac578f         ldy 0x8f57                  ; load index y with memory
        |   0x00008e72      b93b8f         lda 0x8f3b,y                ; load accumulator with memory
        |   0x00008e75      8dca8e         sta 0x8eca                  ; store accumulator in memory
        |   0x00008e78      b9408f         lda 0x8f40,y                ; load accumulator with memory
        |   0x00008e7b      8dcb8e         sta 0x8ecb                  ; store accumulator in memory
       .--> 0x00008e7e      20948e         jsr 0x8e94                  ; jump to new location saving return address
       ||   0x00008e81      a901           lda #0x01                   ; load accumulator with memory
       ||   0x00008e83      20018b         jsr 0x8b01                  ; jump to new location saving return address
       ||   0x00008e86      20c98e         jsr 0x8ec9                  ; jump to new location saving return address
       ||   0x00008e89      20018e         jsr 0x8e01                  ; jump to new location saving return address
      ,===< 0x00008e8c      d005           bne 0x4f9108                ; branch on result not zero
      |||   0x00008e8e      ad5b8f         lda 0x8f5b                  ; load accumulator with memory
      |`==< 0x00008e91      10eb           bpl 0x4f9108                ; branch on result plus
      `---> 0x00008e93      60             rts                         ; return from subroutine
        |   0x00008e94      a40a           ldy 0x0a                    ; load index y with memory
        |   0x00008e96      b9e813         lda 0x13e8,y                ; load accumulator with memory
        |   0x00008e99      852d           sta 0x2d                    ; store accumulator in memory
        |   0x00008e9b      b90014         lda 0x1400,y                ; load accumulator with memory
        |   0x00008e9e      8502           sta 0x02                    ; store accumulator in memory
        |   0x00008ea0      b9a814         lda 0x14a8,y                ; load accumulator with memory
        |   0x00008ea3      852e           sta 0x2e                    ; store accumulator in memory
        |   0x00008ea5      b9c014         lda 0x14c0,y                ; load accumulator with memory
        |   0x00008ea8      18             clc                         ; clear carry flag
        |   0x00008ea9      6980           adc #0x80                   ; add memory to accumulator with carry
        |   0x00008eab      8503           sta 0x03                    ; store accumulator in memory
        |   0x00008ead      a508           lda 0x08                    ; load accumulator with memory
        |   0x00008eaf      29f8           and #0xf8                   ; "and" memory with accumulator
        |   0x00008eb1      a8             tay                         ; transfer accumulator to index y
        |   0x00008eb2      a609           ldx 0x09                    ; load index x with memory
       ,==< 0x00008eb4      f004           beq 0x4f9108                ; branch on result zero
       ||   0x00008eb6      e62e           inc 0x2e                    ; increment memory by one
       ||   0x00008eb8      e603           inc 0x03                    ; increment memory by one
       `--> 0x00008eba      a508           lda 0x08                    ; load accumulator with memory
        |   0x00008ebc      2907           and #0x07                   ; "and" memory with accumulator
        |   0x00008ebe      aa             tax                         ; transfer accumulator to index x
        |   0x00008ebf      bd458f         lda 0x8f45,x                ; load accumulator with memory
        |   0x00008ec2      3102           and (0x02),y                ; "and" memory with accumulator
        |   0x00008ec4      112d           ora (0x2d),y                ; "or" memory with accumulator
        |   0x00008ec6      912d           sta (0x2d),y                ; store accumulator in memory
        |   0x00008ec8      60             rts                         ; return from subroutine
        |   0x00008ec9      ad1111         lda 0x1111                  ; load accumulator with memory
       ,`-> 0x00008ecc      d006           bne 0x4f9108                ; branch on result not zero
       |    0x00008ece      a9ff           lda #0xff                   ; load accumulator with memory
       |    0x00008ed0      8d5b8f         sta 0x8f5b                  ; store accumulator in memory
       |    0x00008ed3      60             rts                         ; return from subroutine
       `--> 0x00008ed4      48             pha                         ; push accumulator on stack
            0x00008ed5      4a             lsr a                       ; shift right one bit (memory or accumulator)
            0x00008ed6      4a             lsr a                       ; shift right one bit (memory or accumulator)
            0x00008ed7      4a             lsr a                       ; shift right one bit (memory or accumulator)
            0x00008ed8      4a             lsr a                       ; shift right one bit (memory or accumulator)
            0x00008ed9      8d5d8f         sta 0x8f5d                  ; store accumulator in memory
            0x00008edc      a908           lda #0x08                   ; load accumulator with memory
            0x00008ede      2c5d8f         bit 0x8f5d                  ; test bits in memory with accumulator
            0x00008ee1      08             php                         ; push processor status on stack
            0x00008ee2      a907           lda #0x07                   ; load accumulator with memory
            0x00008ee4      2d5d8f         and 0x8f5d                  ; "and" memory with accumulator
            0x00008ee7      8d5d8f         sta 0x8f5d                  ; store accumulator in memory
            0x00008eea      a508           lda 0x08                    ; load accumulator with memory
            0x00008eec      28             plp                         ; pull processor status from stack
        ,=< 0x00008eed      f00f           beq 0x4f9108                ; branch on result zero
        |   0x00008eef      38             sec                         ; set carry flag
        |   0x00008ef0      ed5d8f         sbc 0x8f5d                  ; subtract memory from accumulator with borrow
        |   0x00008ef3      8508           sta 0x08                    ; store accumulator in memory
        |   0x00008ef5      a509           lda 0x09                    ; load accumulator with memory
        |   0x00008ef7      e900           sbc #0x00                   ; subtract memory from accumulator with borrow
        |   0x00008ef9      8509           sta 0x09                    ; store accumulator in memory
       ,==< 0x00008efb      4c0a8f         jmp 0x8f0a                  ; jump to new location
       |`-> 0x00008efe      18             clc                         ; clear carry flag
       |    0x00008eff      6d5d8f         adc 0x8f5d                  ; add memory to accumulator with carry
       |    0x00008f02      8508           sta 0x08                    ; store accumulator in memory
       |    0x00008f04      a509           lda 0x09                    ; load accumulator with memory
       |    0x00008f06      6900           adc #0x00                   ; add memory to accumulator with carry
       |    0x00008f08      8509           sta 0x09                    ; store accumulator in memory
       `--> 0x00008f0a      68             pla                         ; pull accumulator from stack
            0x00008f0b      290f           and #0x0f                   ; "and" memory with accumulator
            0x00008f0d      8d5d8f         sta 0x8f5d                  ; store accumulator in memory
            0x00008f10      a908           lda #0x08                   ; load accumulator with memory
            0x00008f12      2c5d8f         bit 0x8f5d                  ; test bits in memory with accumulator
            0x00008f15      08             php                         ; push processor status on stack
            0x00008f16      a907           lda #0x07                   ; load accumulator with memory
            0x00008f18      2d5d8f         and 0x8f5d                  ; "and" memory with accumulator
            0x00008f1b      8d5d8f         sta 0x8f5d                  ; store accumulator in memory
            0x00008f1e      a50a           lda 0x0a                    ; load accumulator with memory
            0x00008f20      28             plp                         ; pull processor status from stack
        ,=< 0x00008f21      f009           beq 0x4f9108                ; branch on result zero
        |   0x00008f23      38             sec                         ; set carry flag
        |   0x00008f24      ed5d8f         sbc 0x8f5d                  ; subtract memory from accumulator with borrow
        |   0x00008f27      850a           sta 0x0a                    ; store accumulator in memory
       ,==< 0x00008f29      4c328f         jmp 0x8f32                  ; jump to new location
       |`-> 0x00008f2c      18             clc                         ; clear carry flag
       |    0x00008f2d      6d5d8f         adc 0x8f5d                  ; add memory to accumulator with carry
       |    0x00008f30      850a           sta 0x0a                    ; store accumulator in memory
       `--> 0x00008f32      eeca8e         inc 0x8eca                  ; increment memory by one
        ,=< 0x00008f35      d003           bne 0x4f9108                ; branch on result not zero
        |   0x00008f37      eecb8e         inc 0x8ecb                  ; increment memory by one
        `-> 0x00008f3a      60             rts                         ; return from subroutine
            0x00008f3b      00             brk                         ; force break
            0x00008f3c      64ab           nop 0xab                    ; no operation
            0x00008f3e      594840         eor 0x4048,y                ; "exclusive-or" memory with accumulator
            0x00008f41      4345           sre (0x45,x)
            0x00008f43      474b           sre 0x4b
            0x00008f45      8040           nop #0x40                   ; no operation
            0x00008f47      201008         jsr 0x0810                  ; jump to new location saving return address
            0x00008f4a      0402           nop 0x02                    ; no operation
            0x00008f4c      0106           ora (0x06,x)                ; "or" memory with accumulator
            0x00008f4e      00             brk                         ; force break
            0x00008f4f      4d8f00         eor 0x008f                  ; "exclusive-or" memory with accumulator
            0x00008f52      00             brk                         ; force break
            0x00008f53      00             brk                         ; force break
            0x00008f54      0100           ora (0x00,x)                ; "or" memory with accumulator
            0x00008f56      0700           slo 0x00
            0x00008f58      00             brk                         ; force break
            0x00008f59      00             brk                         ; force break
            0x00008f5a      00             brk                         ; force break
            0x00008f5b      00             brk                         ; force break
            0x00008f5c      00             brk                         ; force break
            0x00008f5d      00             brk                         ; force break
            0x00008f5e      00             brk                         ; force break
            0x00008f5f      40             rti                         ; return from interrupt
            0x00008f60      4142           eor (0x42,x)                ; "exclusive-or" memory with accumulator
            0x00008f62      4344           sre (0x44,x)
            0x00008f64      4546           eor 0x46                    ; "exclusive-or" memory with accumulator
            0x00008f66      4780           sre 0x80
            0x00008f68      8182           sta (0x82,x)                ; store accumulator in memory
            0x00008f6a      8384           sax (0x84,x)
            0x00008f6c      8586           sta 0x86                    ; store accumulator in memory
            0x00008f6e      87c0           sax 0xc0
            0x00008f70      c1c2           cmp (0xc2,x)                ; compare memory and accumulator
            0x00008f72      c3c4           dcp (0xc4,x)
            0x00008f74      c5c6           cmp 0xc6                    ; compare memory and accumulator
            0x00008f76      c700           dcp 0x00
            0x00008f78      0102           ora (0x02,x)                ; "or" memory with accumulator
            0x00008f7a      0304           slo (0x04,x)
            0x00008f7c      0506           ora 0x06                    ; "or" memory with accumulator
            0x00008f7e      0740           slo 0x40
            0x00008f80      4142           eor (0x42,x)                ; "exclusive-or" memory with accumulator
            0x00008f82      4344           sre (0x44,x)
            0x00008f84      4546           eor 0x46                    ; "exclusive-or" memory with accumulator
            0x00008f86      4780           sre 0x80
            0x00008f88      8182           sta (0x82,x)                ; store accumulator in memory
            0x00008f8a      8384           sax (0x84,x)
            0x00008f8c      8586           sta 0x86                    ; store accumulator in memory
            0x00008f8e      87c0           sax 0xc0
            0x00008f90      c1c2           cmp (0xc2,x)                ; compare memory and accumulator
            0x00008f92      c3c4           dcp (0xc4,x)
            0x00008f94      c5c6           cmp 0xc6                    ; compare memory and accumulator
            0x00008f96      c700           dcp 0x00
            0x00008f98      0102           ora (0x02,x)                ; "or" memory with accumulator
            0x00008f9a      0304           slo (0x04,x)
            0x00008f9c      0506           ora 0x06                    ; "or" memory with accumulator
            0x00008f9e      0740           slo 0x40
            0x00008fa0      4142           eor (0x42,x)                ; "exclusive-or" memory with accumulator
            0x00008fa2      4344           sre (0x44,x)
            0x00008fa4      4546           eor 0x46                    ; "exclusive-or" memory with accumulator
            0x00008fa6      4780           sre 0x80
            0x00008fa8      8182           sta (0x82,x)                ; store accumulator in memory
            0x00008faa      8384           sax (0x84,x)
            0x00008fac      8586           sta 0x86                    ; store accumulator in memory
            0x00008fae      87c0           sax 0xc0
            0x00008fb0      c1c2           cmp (0xc2,x)                ; compare memory and accumulator
            0x00008fb2      c3c4           dcp (0xc4,x)
            0x00008fb4      c5c6           cmp 0xc6                    ; compare memory and accumulator
            0x00008fb6      c700           dcp 0x00
            0x00008fb8      0102           ora (0x02,x)                ; "or" memory with accumulator
            0x00008fba      0304           slo (0x04,x)
            0x00008fbc      0506           ora 0x06                    ; "or" memory with accumulator
            0x00008fbe      0740           slo 0x40
            0x00008fc0      4142           eor (0x42,x)                ; "exclusive-or" memory with accumulator
            0x00008fc2      4344           sre (0x44,x)
            0x00008fc4      4546           eor 0x46                    ; "exclusive-or" memory with accumulator
            0x00008fc6      4780           sre 0x80
            0x00008fc8      8182           sta (0x82,x)                ; store accumulator in memory
            0x00008fca      8384           sax (0x84,x)
            0x00008fcc      8586           sta 0x86                    ; store accumulator in memory
            0x00008fce      87c0           sax 0xc0
            0x00008fd0      c1c2           cmp (0xc2,x)                ; compare memory and accumulator
            0x00008fd2      c3c4           dcp (0xc4,x)
            0x00008fd4      c5c6           cmp 0xc6                    ; compare memory and accumulator
            0x00008fd6      c700           dcp 0x00
            0x00008fd8      0102           ora (0x02,x)                ; "or" memory with accumulator
            0x00008fda      0304           slo (0x04,x)
            0x00008fdc      0506           ora 0x06                    ; "or" memory with accumulator
            0x00008fde      0740           slo 0x40
            0x00008fe0      4142           eor (0x42,x)                ; "exclusive-or" memory with accumulator
            0x00008fe2      4344           sre (0x44,x)
            0x00008fe4      4546           eor 0x46                    ; "exclusive-or" memory with accumulator
            0x00008fe6      4780           sre 0x80
            0x00008fe8      8182           sta (0x82,x)                ; store accumulator in memory
            0x00008fea      8384           sax (0x84,x)
            0x00008fec      8586           sta 0x86                    ; store accumulator in memory
            0x00008fee      87c0           sax 0xc0
            0x00008ff0      c1c2           cmp (0xc2,x)                ; compare memory and accumulator
            0x00008ff2      c3c4           dcp (0xc4,x)
            0x00008ff4      c5c6           cmp 0xc6                    ; compare memory and accumulator
            0x00008ff6      c700           dcp 0x00
            0x00008ff8      0102           ora (0x02,x)                ; "or" memory with accumulator
            0x00008ffa      0304           slo (0x04,x)
            0x00008ffc      0506           ora 0x06                    ; "or" memory with accumulator
            0x00008ffe      0740           slo 0x40
            0x00009000      4142           eor (0x42,x)                ; "exclusive-or" memory with accumulator
            0x00009002      4344           sre (0x44,x)
            0x00009004      4546           eor 0x46                    ; "exclusive-or" memory with accumulator
            0x00009006      4780           sre 0x80
            0x00009008      8182           sta (0x82,x)                ; store accumulator in memory
            0x0000900a      8384           sax (0x84,x)
            0x0000900c      8586           sta 0x86                    ; store accumulator in memory
            0x0000900e      87c0           sax 0xc0
            0x00009010      c1c2           cmp (0xc2,x)                ; compare memory and accumulator
            0x00009012      c3c4           dcp (0xc4,x)
            0x00009014      c5c6           cmp 0xc6                    ; compare memory and accumulator
            0x00009016      c700           dcp 0x00
            0x00009018      0102           ora (0x02,x)                ; "or" memory with accumulator
            0x0000901a      0304           slo (0x04,x)
            0x0000901c      0506           ora 0x06                    ; "or" memory with accumulator
            0x0000901e      0721           slo 0x21
            0x00009020      2121           and (0x21,x)                ; "and" memory with accumulator
            0x00009022      2121           and (0x21,x)                ; "and" memory with accumulator
            0x00009024      2121           and (0x21,x)                ; "and" memory with accumulator
            0x00009026      2122           and (0x22,x)                ; "and" memory with accumulator
            0x00009028      22             hlt
            0x00009029      22             hlt
            0x0000902a      22             hlt
            0x0000902b      22             hlt
            0x0000902c      22             hlt
            0x0000902d      22             hlt
            0x0000902e      22             hlt
            0x0000902f      2323           rla (0x23,x)
            0x00009031      2323           rla (0x23,x)
            0x00009033      2323           rla (0x23,x)
            0x00009035      2323           rla (0x23,x)
            0x00009037      2525           and 0x25                    ; "and" memory with accumulator
            0x00009039      2525           and 0x25                    ; "and" memory with accumulator
            0x0000903b      2525           and 0x25                    ; "and" memory with accumulator
            0x0000903d      2525           and 0x25                    ; "and" memory with accumulator
            0x0000903f      2626           rol 0x26                    ; rotate one bit left (memory or accumulator)
            0x00009041      2626           rol 0x26                    ; rotate one bit left (memory or accumulator)
            0x00009043      2626           rol 0x26                    ; rotate one bit left (memory or accumulator)
            0x00009045      2626           rol 0x26                    ; rotate one bit left (memory or accumulator)
            0x00009047      2727           rla 0x27
            0x00009049      2727           rla 0x27
            0x0000904b      2727           rla 0x27
            0x0000904d      2727           rla 0x27
            0x0000904f      28             plp                         ; pull processor status from stack
            0x00009050      28             plp                         ; pull processor status from stack
            0x00009051      28             plp                         ; pull processor status from stack
            0x00009052      28             plp                         ; pull processor status from stack
            0x00009053      28             plp                         ; pull processor status from stack
            0x00009054      28             plp                         ; pull processor status from stack
            0x00009055      28             plp                         ; pull processor status from stack
            0x00009056      28             plp                         ; pull processor status from stack
            0x00009057      2a             rol a                       ; rotate one bit left (memory or accumulator)
            0x00009058      2a             rol a                       ; rotate one bit left (memory or accumulator)
            0x00009059      2a             rol a                       ; rotate one bit left (memory or accumulator)
            0x0000905a      2a             rol a                       ; rotate one bit left (memory or accumulator)
            0x0000905b      2a             rol a                       ; rotate one bit left (memory or accumulator)
            0x0000905c      2a             rol a                       ; rotate one bit left (memory or accumulator)
            0x0000905d      2a             rol a                       ; rotate one bit left (memory or accumulator)
            0x0000905e      2a             rol a                       ; rotate one bit left (memory or accumulator)
            0x0000905f      2b2b           anc #0x2b
            0x00009061      2b2b           anc #0x2b
            0x00009063      2b2b           anc #0x2b
            0x00009065      2b2b           anc #0x2b
            0x00009067      2c2c2c         bit 0x2c2c                  ; test bits in memory with accumulator
            0x0000906a      2c2c2c         bit 0x2c2c                  ; test bits in memory with accumulator
            0x0000906d      2c2c2d         bit 0x2d2c                  ; test bits in memory with accumulator
            0x00009070      2d2d2d         and 0x2d2d                  ; "and" memory with accumulator
            0x00009073      2d2d2d         and 0x2d2d                  ; "and" memory with accumulator
            0x00009076      2d2f2f         and 0x2f2f                  ; "and" memory with accumulator
            0x00009079      2f2f2f         rla 0x2f2f
            0x0000907c      2f2f2f         rla 0x2f2f
        ,=< 0x0000907f      3030           bmi 0x4f9108                ; branch on result minus
       ,==< 0x00009081      3030           bmi 0x4f9108                ; branch on result minus
      ,===< 0x00009083      3030           bmi 0x4f9108                ; branch on result minus
     ,====< 0x00009085      3030           bmi 0x4f9108                ; branch on result minus
     ||||   0x00009087      3131           and (0x31),y                ; "and" memory with accumulator
     ||||   0x00009089      3131           and (0x31),y                ; "and" memory with accumulator
     ||||   0x0000908b      3131           and (0x31),y                ; "and" memory with accumulator
     ||||   0x0000908d      3131           and (0x31),y                ; "and" memory with accumulator
     ||||   0x0000908f      32             hlt
     ||||   0x00009090      32             hlt
     ||||   0x00009091      32             hlt
     ||||   0x00009092      32             hlt
     ||||   0x00009093      32             hlt
     ||||   0x00009094      32             hlt
     ||||   0x00009095      32             hlt
     ||||   0x00009096      32             hlt
     ||||   0x00009097      3434           nop 0x34,x                  ; no operation
     ||||   0x00009099      3434           nop 0x34,x                  ; no operation
     ||||   0x0000909b      3434           nop 0x34,x                  ; no operation
     ||||   0x0000909d      3434           nop 0x34,x                  ; no operation
     ||||   0x0000909f      3535           and 0x35,x                  ; "and" memory with accumulator
     ||||   0x000090a1      3535           and 0x35,x                  ; "and" memory with accumulator
    |||||   0x000090a3      3535           and 0x35,x                  ; "and" memory with accumulator
    |||||   0x000090a5      3535           and 0x35,x                  ; "and" memory with accumulator
    |||||   0x000090a7      3636           rol 0x36,x                  ; rotate one bit left (memory or accumulator)
    |||||   0x000090a9      3636           rol 0x36,x                  ; rotate one bit left (memory or accumulator)
    |||||   0x000090ab      3636           rol 0x36,x                  ; rotate one bit left (memory or accumulator)
    |||||   0x000090ad      3636           rol 0x36,x                  ; rotate one bit left (memory or accumulator)
    |||||   0x000090af      3737           rla 0x37,x
    ||||`-> 0x000090b1      3737           rla 0x37,x
    |||`--> 0x000090b3      3737           rla 0x37,x
    ||`---> 0x000090b5      3737           rla 0x37,x
    |`----> 0x000090b7      393939         and 0x3939,y                ; "and" memory with accumulator
    |       0x000090ba      393939         and 0x3939,y                ; "and" memory with accumulator
    |       0x000090bd      39393a         and 0x3a39,y                ; "and" memory with accumulator
    |       0x000090c0      3a             nop                         ; no operation
    |       0x000090c1      3a             nop                         ; no operation
    |       0x000090c2      3a             nop                         ; no operation
    |       0x000090c3      3a             nop                         ; no operation
    |       0x000090c4      3a             nop                         ; no operation
    |       0x000090c5      3a             nop                         ; no operation
    |       0x000090c6      3a             nop                         ; no operation
    |       0x000090c7      3b3b3b         rla 0x3b3b,y
    |       0x000090ca      3b3b3b         rla 0x3b3b,y
    |       0x000090cd      3b3b3c         rla 0x3c3b,y
    |       0x000090d0      3c3c3c         nop 0x3c3c,x                ; no operation
    |       0x000090d3      3c3c3c         nop 0x3c3c,x                ; no operation
    |       0x000090d6      3c3e3e         nop 0x3e3e,x                ; no operation
    |       0x000090d9      3e3e3e         rol 0x3e3e,x                ; rotate one bit left (memory or accumulator)
    |       0x000090dc      3e3e3e         rol 0x3e3e,x                ; rotate one bit left (memory or accumulator)
    |       0x000090df      28             plp                         ; pull processor status from stack
    |   ,=< 0x000090e0      5078           bvc 0x4f9108                ; branch on overflow clear
    |   |   0x000090e2      a0c8           ldy #0xc8                   ; load index y with memory
    |  ,==< 0x000090e4      f018           beq 0x4f9108                ; branch on result zero
    |  ||   0x000090e6      40             rti                         ; return from interrupt
    |  ||   0x000090e7      68             pla                         ; pull accumulator from stack
    `=====< 0x000090e8      90b8           bcc 0x4f9108                ; branch on carry clear
      .---> 0x000090ea      e008           cpx #0x08                   ; compare memory and index x
     ,====< 0x000090ec      3058           bmi 0x4f9108                ; branch on result minus
     ||||   0x000090ee      80a8           nop #0xa8                   ; no operation
     |`===< 0x000090f0      d0f8           bne 0x4f9108                ; branch on result not zero
     | ||   0x000090f2      204870         jsr 0x7048                  ; jump to new location saving return address
     | ||   0x000090f5      98             tya                         ; transfer index y to accumulator
     | ||   0x000090f6      c0e8           cpy #0xe8                   ; compare memory and index y
     | ||   0x000090f8      0404           nop 0x04                    ; no operation
     | ||   0x000090fa      0404           nop 0x04                    ; no operation
     | ||   0x000090fc      0404           nop 0x04                    ; no operation
     | `--> 0x000090fe      0505           ora 0x05                    ; "or" memory with accumulator
     |  |   0x00009100      0505           ora 0x05                    ; "or" memory with accumulator
     |  |   0x00009102      0505           ora 0x05                    ; "or" memory with accumulator
     |  |   0x00009104      0606           asl 0x06                    ; shift left one bit (memory or accumulator)
     |  |   0x00009106      0606           asl 0x06                    ; shift left one bit (memory or accumulator)
     |  |   0x00009108      0606           asl 0x06                    ; shift left one bit (memory or accumulator)
     |  |   0x0000910a      0607           asl 0x07                    ; shift left one bit (memory or accumulator)
     |  |   0x0000910c      0707           slo 0x07
     |  |   0x0000910e      0707           slo 0x07
            0x00009110      07
            0x00009111      00                              ; variable or data
     |  |   0x00009112      00             
     |  |   0x00009113      00             
     |  |   0x00009114      00             
     |  |   0x00009115      00             
     |  |   0x00009116      00             
     |  |   0x00009117      00             
     |  |   0x00009118      0f0000         
     |  |   0x0000911b      1f0000         
     |  |   0x0000911e      0c0001         
     |  |   0x00009121      e0e0           
     |  |   0x00009123      03f1           
     |  |   0x00009125      f003           
     |  |   0x00009127      f9e001         
     |  |   0x0000912a      f8             
     |  |   0x0000912b      00             
     |  |   0x0000912c      01f8           
     |  |   0x0000912e      00             
     |  |   0x0000912f      03f9           
     |  |   0x00009131      e003           
     |  |   0x00009133      f1f0           
     |  |   0x00009135      01e0           
     |  |   0x00009137      e000           
     |  |   0x00009139      0c0000         
     |  |   0x0000913c      1f0000         
     |  |   0x0000913f      0e0000         
     |  |   0x00009142      00             
     |  |   0x00009143      00             
     |  |   0x00009144      00             
     |  |   0x00009145      00             
     `----> 0x00009146      00             
        |   0x00009147      00             
        |   0x00009148      00             
        |   0x00009149      00             
        |   0x0000914a      00             
        |   0x0000914b      00             
        |   0x0000914c      00             
        |   0x0000914d      00             
        |   0x0000914e      00             
        |   0x0000914f      00             
        |   0x00009150      00             
        |   0x00009151      00             
        |   0x00009152      00             

local:
        |   0x00009153      38             sec                         ; set carry flag
        |   0x00009154      6e5191         ror 0x9151                  ; rotate one bit right (memory or accumulator)
       ,==< 0x00009157      300d           bmi 0x4f9108                ; branch on result minus
       ||   0x00009159      a24e           ldx #0x4e                   ; load index x with memory
       |    0x0000915b      a94c           lda #0x4c                   ; load accumulator with memory
       |    0x0000915d      8e9191         stx 0x9191                  ; store index x in memory
       |    0x00009160      8d9291         sta 0x9192                  ; store accumulator in memory
       |    0x00009163      4e5191         lsr 0x9151                  ; shift right one bit (memory or accumulator)
       `--> 0x00009166      a9c0           lda #0xc0                   ; load accumulator with memory
            0x00009168      8d5291         sta 0x9152                  ; store accumulator in memory
            0x0000916b      8c7391         sty 0x9173                  ; store index y in memory
            0x0000916e      207691         jsr 0x9176       ; main loop, left on input
            0x00009171      08             php                         ; push processor status on stack
            0x00009172      a000           ldy #0x00                   ; load index y with memory
            0x00009174      28             plp                         ; pull processor status from stack
            0x00009175      60             rts                         ; return from subroutine

local: main loop in menu
        .-> 0x00009176      2c5191         bit 0x9151                  ; test bits in memory with accumulator
       ,==< 0x00009179      1015           bpl 0x4f9108                ; branch on result plus
       ||   0x0000917b      ce5291         dec 0x9152                  ; decrement memory by one
      ,===< 0x0000917e      d010           bne 0x4f9108                ; branch on result not zero
      |||   0x00009180      68             pla                         ; pull accumulator from stack
      |||   0x00009181      68             pla                         ; pull accumulator from stack
      |||   0x00009182      68             pla                         ; pull accumulator from stack
      |||   0x00009183      68             pla                         ; pull accumulator from stack
      |||   0x00009184      20708d         jsr 0x8d70                  ; jump to new location saving return address
      |||   0x00009187      209b93         jsr 0x939b                  ; jump to new location saving return address
      |||   0x0000918a      20708d         jsr 0x8d70                  ; jump to new location saving return address
  ========< 0x0000918d      4c5084         jmp 0x8450                  ; jump to new location
      ``--> 0x00009190      204e4c         jsr 0x4c4e       ; get keyboard or joystick input 
       ,==< 0x00009193      3018           bmi 0x4f9108                ; branch on result minus
       ||   0x00009195      20d391         jsr 0x91d3       ;
       ||   0x00009198      207a8a         jsr 0x8a7a                  ; jump to new location saving return address
       ||   0x0000919b      a980           lda #0x80                   ; load accumulator with memory
       ||   0x0000919d      20034c         jsr 0x4c03       ; main.subs
       ||   0x000091a0      c6c9           dec 0xc9                    ; decrement memory by one
       ||   0x000091a2      205a4c         jsr 0x4c5a       ; main.subs
       ||   0x000091a5      a950           lda #0x50                   ; load accumulator with memory
       ||   0x000091a7      20018b         jsr 0x8b01                  ; jump to new location saving return address
       |`=< 0x000091aa      4c7691         jmp 0x9176       ; end of main loop
       `--> 0x000091ad      48             pha              ; when key pressed
            0x000091ae      a9a0           lda #0xa0                   ; load accumulator with memory
            0x000091b0      200f4c         jsr 0x4c0f       ; main.subs
            0x000091b3      68             pla                         ; pull accumulator from stack
            0x000091b4      60             rts                         ; return from subroutine

            0x000091b5      20e4ff         jsr 0xffe4       ; GETIN. Read byte from default input. (If not keyboard, must call OPEN and CHKIN beforehands.)
        ,=< 0x000091b8      f018           beq 0x4f9108                ; branch on result zero
        |   0x000091ba      c941           cmp #0x41                   ; compare memory and accumulator
       ,==< 0x000091bc      9006           bcc 0x4f9108                ; branch on carry clear
       ||   0x000091be      c95b           cmp #0x5b                   ; compare memory and accumulator
      ,===< 0x000091c0      b002           bcs 0x4f9108                ; branch on carry set
      |||   0x000091c2      49a0           eor #0xa0                   ; "exclusive-or" memory with accumulator
      ``--> 0x000091c4      c914           cmp #0x14                   ; compare memory and accumulator
       ,==< 0x000091c6      d002           bne 0x4f9108                ; branch on result not zero
       ||   0x000091c8      a988           lda #0x88                   ; load accumulator with memory
       `--> 0x000091ca      c920           cmp #0x20                   ; compare memory and accumulator
       ,==< 0x000091cc      9002           bcc 0x4f9108                ; branch on carry clear
       ||   0x000091ce      0980           ora #0x80                   ; "or" memory with accumulator
       `--> 0x000091d0      a2ff           ldx #0xff                   ; load index x with memory
        `-> 0x000091d2      60             rts                         ; return from subroutine

local:
  --------> 0x000091d3      a5c8           lda 0xc8                    ; load accumulator with memory
        ,=< 0x000091d5      1012           bpl 0x4f9108                ; branch on result plus
        |   0x000091d7      aecd03         ldx 0x03cd                  ; load index x with memory
        |   0x000091da      ecce03         cpx 0x03ce                  ; compare memory and index x
       ,==< 0x000091dd      d00a           bne 0x4f9108                ; branch on result not zero
       ||   0x000091df      e8             inx                         ; increment index x by one
       ||   0x000091e0      e010           cpx #0x10                   ; compare memory and index x
      ,===< 0x000091e2      9002           bcc 0x4f9108                ; branch on carry clear
      |||   0x000091e4      a201           ldx #0x01                   ; load index x with memory
      `---> 0x000091e6      8ecd03         stx 0x03cd                  ; store index x in memory
       ``-> 0x000091e9      60             rts                         ; return from subroutine
            0x000091ea      00             brk                         ; force break
            0x000091eb      00             brk              ; variable
            0x000091ec      00             brk                         ; force break

(): process loaded data in $c000
            0x000091ed      a2c0           ldx #0xc0        ; value can be changed
            0x000091ef      8641           stx 0x41                    ; store index x in memory
            0x000091f1      a200           ldx #0x00                   ; load index x with memory
            0x000091f3      8640           stx 0x40                    ; store index x in memory
            0x000091f5      853f           sta 0x3f                    ; store accumulator in memory
            0x000091f7      20066c         jsr 0x6c06                  ; jump to new location saving return address
            0x000091fa      a540           lda 0x40                    ; load accumulator with memory
            0x000091fc      853d           sta 0x3d                    ; store accumulator in memory
            0x000091fe      a541           lda 0x41                    ; load accumulator with memory
            0x00009200      853e           sta 0x3e                    ; store accumulator in memory
            0x00009202      a53f           lda 0x3f                    ; load accumulator with memory
            0x00009204      18             clc                         ; clear carry flag
            0x00009205      691f           adc #0x1f                   ; add memory to accumulator with carry
            0x00009207      8d4d92         sta 0x924d                  ; store accumulator in memory
            0x0000920a      8d5d92         sta 0x925d                  ; store accumulator in memory
            0x0000920d      a000           ldy #0x00                   ; load index y with memory
            0x0000920f      b13d           lda (0x3d),y                ; load accumulator with memory
            0x00009211      aa             tax                         ; transfer accumulator to index x
            0x00009212      293f           and #0x3f                   ; "and" memory with accumulator
            0x00009214      8537           sta 0x37                    ; store accumulator in memory
            0x00009216      c8             iny                         ; increment index y by one
            0x00009217      b13d           lda (0x3d),y                ; load accumulator with memory
            0x00009219      8536           sta 0x36                    ; store accumulator in memory
            0x0000921b      8deb91         sta 0x91eb                  ; store accumulator in memory
            0x0000921e      a53d           lda 0x3d                    ; load accumulator with memory
            0x00009220      18             clc                         ; clear carry flag
            0x00009221      6902           adc #0x02                   ; add memory to accumulator with carry
            0x00009223      853d           sta 0x3d                    ; store accumulator in memory
        ,=< 0x00009225      9002           bcc 0x4f9108                ; branch on carry clear
        |   0x00009227      e63e           inc 0x3e                    ; increment memory by one
        `-> 0x00009229      a000           ldy #0x00                   ; load index y with memory
            0x0000922b      843b           sty 0x3b                    ; store index y in memory
            0x0000922d      b13d           lda (0x3d),y                ; load accumulator with memory
            0x0000922f      8dea91         sta 0x91ea                  ; store accumulator in memory
            0x00009232      20c892         jsr 0x92c8                  ; jump to new location saving return address
        .-> 0x00009235      8cec91         sty 0x91ec                  ; store index y in memory
        |   0x00009238      20cf92         jsr 0x92cf                  ; jump to new location saving return address
        |   0x0000923b      a637           ldx 0x37                    ; load index x with memory
        |   0x0000923d      bd0e93         lda 0x930e,x                ; load accumulator with memory
        |   0x00009240      18             clc                         ; clear carry flag
        |   0x00009241      6530           adc 0x30                    ; add memory to accumulator with carry
        |   0x00009243      8532           sta 0x32                    ; store accumulator in memory
        |   0x00009245      bd3793         lda 0x9337,x                ; load accumulator with memory
        |   0x00009248      6531           adc 0x31                    ; add memory to accumulator with carry
        |   0x0000924a      8533           sta 0x33                    ; store accumulator in memory
        |   0x0000924c      c93f           cmp #0x3f        ; value may be changed
       ,==< 0x0000924e      9010           bcc 0x4f9108                ; branch on carry clear
      ,===< 0x00009250      d006           bne 0x4f9108                ; branch on result not zero
      |||   0x00009252      a532           lda 0x32                    ; load accumulator with memory
      |||   0x00009254      c941           cmp #0x41                   ; compare memory and accumulator
     ,====< 0x00009256      9008           bcc 0x4f9108                ; branch on carry clear
     |`---> 0x00009258      a941           lda #0x41                   ; load accumulator with memory
     | ||   0x0000925a      8532           sta 0x32                    ; store accumulator in memory
     | ||   0x0000925c      a93f           lda #0x3f        ; value may be changed
     | ||   0x0000925e      8533           sta 0x33                    ; store accumulator in memory
     `-`--> 0x00009260      a63b           ldx 0x3b                    ; load index x with memory
       ,==< 0x00009262      f009           beq 0x4f9108                ; branch on result zero
       ||   0x00009264      a000           ldy #0x00                   ; load index y with memory
       ||   0x00009266      843b           sty 0x3b                    ; store index y in memory
       ||   0x00009268      a539           lda 0x39                    ; load accumulator with memory
      ,===< 0x0000926a      4c8192         jmp 0x9281                  ; jump to new location
    ..-`--> 0x0000926d      a000           ldy #0x00                   ; load index y with memory
    ||| |   0x0000926f      b13d           lda (0x3d),y                ; load accumulator with memory
    ||| |   0x00009271      cdea91         cmp 0x91ea                  ; compare memory and accumulator
    |||,==< 0x00009274      d028           bne 0x4f9108                ; branch on result not zero
    |||||   0x00009276      20c892         jsr 0x92c8                  ; jump to new location saving return address
    |||||   0x00009279      b13d           lda (0x3d),y                ; load accumulator with memory
    |||||   0x0000927b      aa             tax                         ; transfer accumulator to index x
    |||||   0x0000927c      20c892         jsr 0x92c8                  ; jump to new location saving return address
    |||||   0x0000927f      b13d           lda (0x3d),y                ; load accumulator with memory
  ..--`---> 0x00009281      a000           ldy #0x00                   ; load index y with memory
  |||| ||   0x00009283      9130           sta (0x30),y                ; store accumulator in memory
  |||| ||   0x00009285      ca             dex                         ; decrement index x by one
  ||||,===< 0x00009286      f018           beq 0x4f9108                ; branch on result zero
  |||||||   0x00009288      206093         jsr 0x9360                  ; jump to new location saving return address
  |||||||   0x0000928b      a431           ldy 0x31                    ; load index y with memory
  |||||||   0x0000928d      c433           cpy 0x33                    ; compare memory and index y
  `=======< 0x0000928f      d0f0           bne 0x4f9108                ; branch on result not zero
   ||||||   0x00009291      a430           ldy 0x30                    ; load index y with memory
   ||||||   0x00009293      c432           cpy 0x32                    ; compare memory and index y
   `======< 0x00009295      d0ea           bne 0x4f9108                ; branch on result not zero
    |||||   0x00009297      8539           sta 0x39                    ; store accumulator in memory
    |||||   0x00009299      863b           stx 0x3b                    ; store index x in memory
   ,======< 0x0000929b      4cb592         jmp 0x92b5                  ; jump to new location
   ||||`--> 0x0000929e      9130           sta (0x30),y                ; store accumulator in memory
   |||`---> 0x000092a0      e63d           inc 0x3d                    ; increment memory by one
   ||| ,==< 0x000092a2      d002           bne 0x4f9108                ; branch on result not zero
   ||| ||   0x000092a4      e63e           inc 0x3e                    ; increment memory by one
   ||| `--> 0x000092a6      206093         jsr 0x9360                  ; jump to new location saving return address
   |||  |   0x000092a9      a531           lda 0x31                    ; load accumulator with memory
   |||  |   0x000092ab      c533           cmp 0x33                    ; compare memory and accumulator
   |`=====< 0x000092ad      d0be           bne 0x4f9108                ; branch on result not zero
   | |  |   0x000092af      a530           lda 0x30                    ; load accumulator with memory
   | |  |   0x000092b1      c532           cmp 0x32                    ; compare memory and accumulator
   | `====< 0x000092b3      d0b8           bne 0x4f9108                ; branch on result not zero
   `------> 0x000092b5      ceeb91         dec 0x91eb                  ; decrement memory by one
       ,==< 0x000092b8      f007           beq 0x4f9108                ; branch on result zero
      .---> 0x000092ba      acec91         ldy 0x91ec                  ; load index y with memory
      |||   0x000092bd      c8             iny                         ; increment index y by one
      ||`=< 0x000092be      4c3592         jmp 0x9235                  ; jump to new location
      |`--> 0x000092c1      a900           lda #0x00                   ; load accumulator with memory
      |     0x000092c3      8537           sta 0x37                    ; store accumulator in memory
  ========< 0x000092c5      4c036c         jmp 0x6c03                  ; jump to new location

(): ?
      |     0x000092c8      e63d           inc 0x3d                    ; increment memory by one
      | ,=< 0x000092ca      d002           bne 0x4f9108                ; branch on result not zero
      | |   0x000092cc      e63e           inc 0x3e                    ; increment memory by one
      | `-> 0x000092ce      60             rts                         ; return from subroutine

(): ?
            0x000092cf      b9dc92         lda 0x92dc,y                ; load accumulator with memory
            0x000092d2      8530           sta 0x30                    ; store accumulator in memory
            0x000092d4      b9f592         lda 0x92f5,y                ; load accumulator with memory
            0x000092d7      053f           ora 0x3f                    ; "or" memory with accumulator
            0x000092d9      8531           sta 0x31                    ; store accumulator in memory
            0x000092db      60             rts                         ; return from subroutine

            0x000092dc      00             brk              ; variablee (all following seems to be data)
            0x000092dd      40             rti                         ; return from interrupt
            0x000092de      80c0           nop #0xc0                   ; no operation
            0x000092e0      00             brk                         ; force break
            0x000092e1      40             rti                         ; return from interrupt
            0x000092e2      80c0           nop #0xc0                   ; no operation
            0x000092e4      00             brk                         ; force break
            0x000092e5      40             rti                         ; return from interrupt
            0x000092e6      80c0           nop #0xc0                   ; no operation
            0x000092e8      00             brk                         ; force break
            0x000092e9      40             rti                         ; return from interrupt
            0x000092ea      80c0           nop #0xc0                   ; no operation
            0x000092ec      00             brk                         ; force break
            0x000092ed      40             rti                         ; return from interrupt
            0x000092ee      80c0           nop #0xc0                   ; no operation
            0x000092f0      00             brk                         ; force break
            0x000092f1      40             rti                         ; return from interrupt
            0x000092f2      80c0           nop #0xc0                   ; no operation
            0x000092f4      00             brk                         ; force break
            0x000092f5      00             brk              ; variable (all following seems to be data)
            0x000092f6      0102           ora (0x02,x)                ; "or" memory with accumulator
            0x000092f8      0305           slo (0x05,x)
            0x000092fa      0607           asl 0x07                    ; shift left one bit (memory or accumulator)
            0x000092fc      08             php                         ; push processor status on stack
            0x000092fd      0a             asl a                       ; shift left one bit (memory or accumulator)
            0x000092fe      0b0c           anc #0x0c
            0x00009300      0d0f10         ora 0x100f                  ; "or" memory with accumulator
            0x00009303      1112           ora (0x12),y                ; "or" memory with accumulator
            0x00009305      1415           nop 0x15,x                  ; no operation
            0x00009307      1617           asl 0x17,x                  ; shift left one bit (memory or accumulator)
            0x00009309      191a1b         ora 0x1b1a,y                ; "or" memory with accumulator
            0x0000930c      1c1e00         nop 0x001e,x                ; no operation
            0x0000930f      08             php                         ; push processor status on stack
            0x00009310      1018           bpl 0x4f9108                ; branch on result plus
            0x00009312      202830         jsr 0x3028                  ; jump to new location saving return address
            0x00009315      38             sec                         ; set carry flag
            0x00009316      40             rti                         ; return from interrupt
            0x00009317      48             pha                         ; push accumulator on stack
            0x00009318      5058           bvc 0x4f9108                ; branch on overflow clear
            0x0000931a      60             rts                         ; return from subroutine
            0x0000931b      68             pla                         ; pull accumulator from stack
            0x0000931c      7078           bvs 0x4f9108                ; branch on overflow set
            0x0000931e      8088           nop #0x88                   ; no operation
            0x00009320      9098           bcc 0x4f9108                ; branch on carry clear
            0x00009322      a0a8           ldy #0xa8                   ; load index y with memory
            0x00009324      b0b8           bcs 0x4f9108                ; branch on carry set
            0x00009326      c0c8           cpy #0xc8                   ; compare memory and index y
            0x00009328      d0d8           bne 0x4f9108                ; branch on result not zero
            0x0000932a      e0e8           cpx #0xe8                   ; compare memory and index x
            0x0000932c      f0f8           beq 0x4f9108                ; branch on result zero
            0x0000932e      00             brk                         ; force break
            0x0000932f      08             php                         ; push processor status on stack
            0x00009330      1018           bpl 0x4f9108                ; branch on result plus
            0x00009332      202830         jsr 0x3028                  ; jump to new location saving return address
            0x00009335      38             sec                         ; set carry flag
            0x00009336      40             rti                         ; return from interrupt
            0x00009337      00             brk              ; variable (all following seems to be data)
            0x00009338      00             brk                         ; force break
            0x00009339      00             brk                         ; force break
            0x0000933a      00             brk                         ; force break
            0x0000933b      00             brk                         ; force break
            0x0000933c      00             brk                         ; force break
            0x0000933d      00             brk                         ; force break
            0x0000933e      00             brk                         ; force break
            0x0000933f      00             brk                         ; force break
            0x00009340      00             brk                         ; force break
            0x00009341      00             brk                         ; force break
            0x00009342      00             brk                         ; force break
            0x00009343      00             brk                         ; force break
            0x00009344      00             brk                         ; force break
            0x00009345      00             brk                         ; force break
            0x00009346      00             brk                         ; force break
            0x00009347      00             brk                         ; force break
            0x00009348      00             brk                         ; force break
            0x00009349      00             brk                         ; force break
            0x0000934a      00             brk                         ; force break
            0x0000934b      00             brk                         ; force break
            0x0000934c      00             brk                         ; force break
            0x0000934d      00             brk                         ; force break
            0x0000934e      00             brk                         ; force break
            0x0000934f      00             brk                         ; force break
            0x00009350      00             brk                         ; force break
            0x00009351      00             brk                         ; force break
            0x00009352      00             brk                         ; force break
            0x00009353      00             brk                         ; force break
            0x00009354      00             brk                         ; force break
            0x00009355      00             brk                         ; force break
            0x00009356      00             brk                         ; force break
            0x00009357      0101           ora (0x01,x)                ; "or" memory with accumulator
            0x00009359      0101           ora (0x01,x)                ; "or" memory with accumulator
            0x0000935b      0101           ora (0x01,x)                ; "or" memory with accumulator
            0x0000935d      0101           ora (0x01,x)                ; "or" memory with accumulator
            0x0000935f      01  
            
(): ?
            0x00009360      e630           inc 0x30                    ; increment memory by one
        ,=< 0x00009362      d002           bne 0x4a7108                ; branch on result not zero
        |   0x00009364      e631           inc 0x31                    ; increment memory by one
        `-> 0x00009366      60             rts                         ; return from subroutine

(): something with sprites?
            0x00009367      b940ba         lda 0xba40,y     ; the following seems to be data
            0x0000936a      99403a         sta 0x3a40,y                ; store accumulator in memory
            0x0000936d      b980bb         lda 0xbb80,y                ; load accumulator with memory
            0x00009370      99803b         sta 0x3b80,y                ; store accumulator in memory
            0x00009373      b9c0bc         lda 0xbcc0,y                ; load accumulator with memory
            0x00009376      99c03c         sta 0x3cc0,y                ; store accumulator in memory
            0x00009379      b900be         lda 0xbe00,y                ; load accumulator with memory
            0x0000937c      99003e         sta 0x3e00,y                ; store accumulator in memory
            0x0000937f      c8             iny                         ; increment index y by one
        ,=< 0x00009380      d018           bne 0x4a7108                ; branch on result not zero
        |   0x00009382      ee6993         inc 0x9369                  ; increment memory by one
        |   0x00009385      ee6c93         inc 0x936c                  ; increment memory by one
        |   0x00009388      ee6f93         inc 0x936f                  ; increment memory by one
        |   0x0000938b      ee7293         inc 0x9372                  ; increment memory by one
        |   0x0000938e      ee7593         inc 0x9375                  ; increment memory by one
        |   0x00009391      ee7893         inc 0x9378                  ; increment memory by one
        |   0x00009394      ee7b93         inc 0x937b                  ; increment memory by one
        |   0x00009397      ee7e93         inc 0x937e                  ; increment memory by one
        `-> 0x0000939a      60             rts                         ; return from subroutine

local:
            0x0000939b      a902           lda #0x02                   ; load accumulator with memory
            0x0000939d      8d7b8a         sta 0x8a7b                  ; store accumulator in memory
            0x000093a0      8533           sta 0x33                    ; store accumulator in memory
            0x000093a2      a01f           ldy #0x1f                   ; load index y with memory
        .-> 0x000093a4      b9b093         lda 0x93b0,y                ; load accumulator with memory
        |   0x000093a7      99c042         sta 0x42c0,y                ; store accumulator in memory
        |   0x000093aa      88             dey                         ; decrement index y by one
        `=< 0x000093ab      10f7           bpl 0x4a7108                ; branch on result plus
        ,=< 0x000093ad      4c0095         jmp 0x9500       ; jump to new file intro.view.prg
        |   0x000093b0      0180           ora (0x80,x)     ; variable
        |   0x000093b2      0180           ora (0x80,x)                ; "or" memory with accumulator
        |   0x000093b4      c183           cmp (0x83,x)                ; compare memory and accumulator
        |   0x000093b6      718e           adc (0x8e),y                ; add memory to accumulator with carry
        |   0x000093b8      1db80f         ora 0x0fb8,x                ; "or" memory with accumulator
       ,==< 0x000093bb      f047           beq 0x4a7108                ; branch on result zero
       ||   0x000093bd      e2ff           nop #0xff                   ; no operation
       ||   0x000093bf      ff47e2         isb 0xe247,x
       ||   0x000093c2      0ff01d         slo 0x1df0
      |||   0x000093c5      b8             clv                         ; clear overflow flag
      |||   0x000093c6      318c           and (0x8c),y                ; "and" memory with accumulator
      |||   0x000093c8      6186           adc (0x86,x)                ; add memory to accumulator with carry
      |||   0x000093ca      4182           eor (0x82,x)                ; "exclusive-or" memory with accumulator
      |||   0x000093cc      0180           ora (0x80,x)                ; "or" memory with accumulator
      |||   0x000093ce      00             brk                         ; force break
      |||   0x000093cf      00             brk                         ; force break
