FEATURES {
    STARTADDRESS:    default = $2000;
}

SYMBOLS {
    __LOADADDR__:    type = import;
}

MEMORY {
    LOADADDR:    file = %O,  start = %S - 2,  size = $0002;
    ZP:          start = $0002,  size = $1a,  define = yes,  file = "";
    STACK:       start = $100,   size = $80,  file = "";

    PRTYDATA:    start = $bc00,  size = $30, file = "";
    ROSTER:      start = $1000,  size = $0400,  file = "";
    SLIST:       start = $4a00,  size = $0200,  file = "";
    MAIN:        start = $2000,  size = $2000,  fill = yes,  fillval = $ff,  define = yes;
    DATA:        start = $4000,  size = $2000,  file = "";
    IO_DATA:     start = $df00,  size = $80,  fill = no;
}

SEGMENTS {
    LOADADDR:    load = LOADADDR, type = ro;

    BSS:         load = DATA,  type = bss, define = yes;
    HEAP:        load = DATA,  type = bss, optional = yes;
    ZEROPAGE:    load = ZP,    type = zp,  define = yes;
    STARTUP:     load = MAIN,  type = ro, start = $2000;
    INIT:        load = MAIN,  type = ro,  define = yes,  optional = yes;
    RODATA:      load = MAIN,  type = ro;
    CODE:        load = MAIN,  type = ro,  define = yes;
    ONCE:        load = MAIN,  type = ro;
    DATA:        load = DATA,  type = rw;

    LOADER:      load = MAIN,  type = rw;
    IO_DATA:     load = IO_DATA,  type = bss;
    IO_CODE:     load = MAIN,  type = rw;
    IO_CODE2:    load = MAIN,  type = rw;
    EXO_CODE:    load = MAIN,  type = rw;
    LOADSAVEGAME: load = MAIN, type = rw;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = INIT;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
